<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>你好，很荣幸您能来到我的博客！</title>
    <url>/2021/02/14/hello-world/</url>
    <content><![CDATA[<p>此博客为本人近期才正式上传，此前一直放在本地(别问为什么，问就是害怕被大佬笑话)，中途因为个人原因和工作繁忙一直未能上线，逢此春节七天留沪过年的时间，经过激烈的思想斗争，最终还是上来了，望大佬轻喷~，有错误的地方还请务必提醒笔者改正，万分感谢！</p>
]]></content>
  </entry>
  <entry>
    <title>函数式编程的柯里化</title>
    <url>/2020/04/07/javascript/javascript02/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 在聊函数柯里化之前我们要知道一下概念：</p>
<ol>
<li>什么是高阶函数，什么是回调函数？<br>我们都知道函数可以作为参数传递到函数中，那么这个作为参数的函数就叫做回调函数、而使用这个参数的函数就叫做高阶函数</li>
<li>那什么是函数式编程呢？<br>高阶函数执行的时候,根据回调函数内部的逻辑不同高阶函数的执行结果也会有所不同，这就叫函数式编程</li>
</ol>
<hr>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>上面我们了解了什么是函数式编程，那么函数柯里化其实就是函数式编程的一个重要思想，也是高阶函数的一个重要应用。就是给函数分步骤传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这期间可嵌套多层这样的接收部分参数的函数，直至返回最后的结果。</p>
<h4 id="1-简单的柯里化"><a href="#1-简单的柯里化" class="headerlink" title="1.简单的柯里化"></a>1.简单的柯里化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 原函数</span><br><span class="line">function sum(a,b,c)&#123;</span><br><span class="line">    return a+b+c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用原函数</span><br><span class="line">sum(1,2,3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 柯里化函数</span><br><span class="line">function sumCurry(a)&#123;</span><br><span class="line"> return function(b)&#123;</span><br><span class="line">     return function(c)&#123;</span><br><span class="line">         return a+b+c</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 调用柯里化函数</span><br><span class="line">sumCurry(1)(2)(3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这就是一个最基本的柯里化拆分， 柯里化后的函数<code>sumCurry</code>每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，在返回的最后一个函数内部执行求和操作，这其实利用了闭包的特性来实现的。</p>
<h4 id="2-通用柯里化函数"><a href="#2-通用柯里化函数" class="headerlink" title="2.通用柯里化函数"></a>2.通用柯里化函数</h4><p>上面的柯里化函数只是最基本最简单的函数，并没有涉及到高阶函数，也没有通用性，面对形参个数不定或者不知道的函数时就束手无策了，那么下面我们就用<code>ES6</code>来封装一个通用的柯里化转换函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function curry (func)&#123;</span><br><span class="line">    return function curriedFn(...args)&#123;</span><br><span class="line">        if( args.length &lt; func.length )&#123;</span><br><span class="line">            return function()&#123;</span><br><span class="line">                return curriedFn(...args.concat.(Array.from(arguments)))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return func(...args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><p>1.函数的柯里化可以让我们给一个函数传递较少的参数得到一个已经记住的某些固定参数的新函数<br>2.这是一种对函数参数的’缓存’<br>3.让函数变的更灵活，让函数的粒度更小<br>可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>防抖节流</title>
    <url>/2020/04/06/javascript/javascript01/</url>
    <content><![CDATA[<h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h3><p>原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。<br>适用场景：<br>按钮提交场景：防止多次提交按钮，只执行最后提交的一次<br>搜索框联想场景：防止联想发送请求，只发送最后一次输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait) &#123;</span><br><span class="line">    let timeout;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        const context &#x3D; this;</span><br><span class="line">        const args &#x3D; arguments;</span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout &#x3D; setTimeout(function()&#123;</span><br><span class="line">            func.apply(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h3><p>原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。<br>适用场景<br>拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动<br>缩放场景：监控浏览器resize</p>
<h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">               let hasRun &#x3D; false;</span><br><span class="line">               return function () &#123;</span><br><span class="line">                   if (hasRun) &#123;</span><br><span class="line">                       return;</span><br><span class="line">                   &#125;</span><br><span class="line">                   hasRun &#x3D; true;</span><br><span class="line">                   setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                       hasRun &#x3D; false;</span><br><span class="line">                       fn.apply(this, arguments);</span><br><span class="line">                   &#125;, delay);</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;);</span><br><span class="line">       let count &#x3D; 0;</span><br><span class="line">       function myEvent()&#123;</span><br><span class="line">           mydiv.innerText &#x3D; count++;</span><br><span class="line">       &#125;        </span><br><span class="line">       mydiv.addEventListener(&#39;click&#39;, throttle(myEvent,2000));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let div &#x3D; document.querySelector(&#39;div&#39;);</span><br><span class="line">var count &#x3D; 0;</span><br><span class="line">function myEvent() &#123;</span><br><span class="line">    div.innerText &#x3D; count++;</span><br><span class="line">&#125;</span><br><span class="line">div.onclick &#x3D; throttle(myEvent,2000);</span><br><span class="line">function throttle(func, wait) &#123;</span><br><span class="line">    let pre &#x3D; 0;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        let now &#x3D; new Date().getTime();</span><br><span class="line">        if (now - pre &gt; wait) &#123;</span><br><span class="line">            pre &#x3D; now;</span><br><span class="line">            func.apply(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>手写Promise</title>
    <url>/2020/04/08/javascript/javascript03/</url>
    <content><![CDATA[<h4 id="表述"><a href="#表述" class="headerlink" title="表述"></a>表述</h4><p>Promise就是将异步任务队列化，将多个异步任务按照顺序输出，同时用链式调用解决回调地狱的问题。<br>今天我们就来好好剖析下Promise的原理：</p>
<h4 id="Promise规范"><a href="#Promise规范" class="headerlink" title="Promise规范"></a>Promise规范</h4><p>1.存在三个状态：等待态(<code>pending</code>)，执行态(<code>fulfilled</code>)，失败态(<code>rejected</code>)<br>2.初始态为等待态，可以转化为执行态和失败态<br>3.执行态不可转化为其他状态，且必须有一个不可变的终值(value)<br>4.失败态不可转化为其他状态，且必须有一个不可变的原因(reason)<br>5.必须提供一个<code>then</code>方法，以供访问其当前值，如果状态成功调用成功回调函数、如果状态是失败，调用失败回调函数<br>6.then方法提供两个参数：<code>onFulfilled</code>和<code>onRejected</code><br>7.<code>onFulfilled</code>和<code>onRejected</code>如果不是函数类型，必须忽略其<br>8.如果<code>executor</code>执行报错，直接执行reject<br>9.不同的<code>promise</code>可以相互套用<br>更多详细内容还请自行参考<code>Promise A+</code>规范</p>
<h3 id="1-不考虑异步的Promise"><a href="#1-不考虑异步的Promise" class="headerlink" title="1.不考虑异步的Promise"></a>1.不考虑异步的Promise</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">            successCallback(this.value)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此，一个不考虑异步情况的简单版Promise就出来了.</p>
<h3 id="2-加入异步逻辑和then方法的多次调用"><a href="#2-加入异步逻辑和then方法的多次调用" class="headerlink" title="2.加入异步逻辑和then方法的多次调用"></a>2.加入异步逻辑和then方法的多次调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">            successCallback(this.value)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-添加then方法的链式调用和取得then方法的返回值"><a href="#3-添加then方法的链式调用和取得then方法的返回值" class="headerlink" title="3.添加then方法的链式调用和取得then方法的返回值"></a>3.添加then方法的链式调用和取得then方法的返回值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">           let x &#x3D; successCallback(this.value)</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">           resolve(x)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个成功的返回值<code>x</code>只能传递普通的值，那如果是一个promise对象呢？这时候我们就要看promise返回的对象的结果，再根据返回的结果决定是调用resolve，还是reject。接下来我们就要再改造一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">           let x &#x3D; successCallback(this.value)</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">           resolvePromise(x,resolve,reject)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolvePromise(x,resolve,reject) &#123;</span><br><span class="line">    if (x instanceof MyPromise) &#123;</span><br><span class="line">        &#x2F;&#x2F; promise对象</span><br><span class="line">        &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason))</span><br><span class="line">        x.then(resolve,reject)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，到了这里我们就解决了上一个返回值可能为promise对象时存在的情况</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
</search>
