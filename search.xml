<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/03/11/javascript/1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>你好，很荣幸您能来到我的博客！</title>
    <url>/2021/02/14/hello-world/</url>
    <content><![CDATA[<p>此博客为本人近期才正式上传，此前一直放在本地(别问为什么，问就是害怕被大佬笑话)，中途因为个人原因和工作繁忙一直未能上线，逢此春节七天留沪过年的时间，经过激烈的思想斗争，最终还是上来了，望大佬轻喷~，有错误的地方还请务必提醒笔者改正，万分感谢！</p>
]]></content>
  </entry>
  <entry>
    <title>Next.js+koa项目环境搭建</title>
    <url>/2020/04/08/react/next/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从19年中开始做UG以来，这大半年时间也算完成了从Vue到React的转型，也学会了运用Next.js这个SSR框架，接下来我就手把手教大家初步运用Next.js+Koa搭建一个初步的全栈项目</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>react Hooks</title>
    <url>/2020/04/12/react/reactHooks/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们都知道rewact开发有两种组件开发模式，一是函数式组件开发，二是类组件式开发，但是相比于函数式组件开发类组件有很多不足之处：</p>
<h5 id="1-缺少逻辑复用机制"><a href="#1-缺少逻辑复用机制" class="headerlink" title="1.缺少逻辑复用机制"></a>1.缺少逻辑复用机制</h5><p>为了服用逻辑增加无实际渲染效果的组件，<br>增加了组件层级显得十分臃肿，<br>增加了调试的难度以及运行效率的降低。</p>
<h5 id="2-类组件经常会变得很复杂难以维护"><a href="#2-类组件经常会变得很复杂难以维护" class="headerlink" title="2.类组件经常会变得很复杂难以维护"></a>2.类组件经常会变得很复杂难以维护</h5><p>将一组相干的业务逻辑拆分到了多个生命周期函数之中<br>在一个生命周期函数内存在多个不相干的业务逻辑</p>
<h5 id="3-类成员方法不能保证this指向的正确性"><a href="#3-类成员方法不能保证this指向的正确性" class="headerlink" title="3.类成员方法不能保证this指向的正确性"></a>3.类成员方法不能保证this指向的正确性</h5><p>为此react16.8版本出了一个非常强大的更新，那就是react hooks，很好的解决了类组件的不足，这让我们能更好的把精力集中在函数式组件的开发之中，今天我们就来聊一聊这个react hooks</p>
<h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p> 此hook是可以让函数式组件保存状态<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useState &#125; from &#39;react&#39;</span><br><span class="line">····</span><br><span class="line">const [num setNum] &#x3D; (0)</span><br></pre></td></tr></table></figure><br> <strong>useState细节:<strong><br> 1.接收唯一的参数即状态初始值，初始值可以为任意数据类型<br> 2.返回值为数组，数组中存储状态值和更改状态值的方法，方法名约定以set开头<br> 3.方法可以被多次调用，用以保存不同状态值<br> 4.参数可以是一个函数，函数返回什么，初始状态就是什么，函数只会被调用一次，用在初始值为动态值的情况下<br> 注意：在参数为一个函数的时候，如果页面渲染依赖返回id结果那么这个执行语句就要被放在回调函数内部</p>
<h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p> 此hook是另一种让函数组件保存状态的方式，和redux极其相似<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useReducer &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">function reducer (state, action) &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &#39;initAdd&#39;:</span><br><span class="line">           return state + 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">····</span><br><span class="line">const [count dispatch] &#x3D; useReducer(reducer, 0)</span><br><span class="line">return &lt;div&gt;</span><br><span class="line">&lt;span&gt;&#123;count&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type:&#39;initAdd&#39;&#125;)&#125;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>用于简化跨组件通信createContext函数代码</p>
<h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect()"></a>useEffect()</h3><p> 让函数组件拥有处理副作用的能力。类似于生命周期<br> 我们可以将此hook看成是类组件中componentDidMount、componentDidUpdate、componentWillUumount三个函数的组合</p>
<p> useEffect(()=&gt;{})            ===   componentDidMount、componentDidUpdate<br> useEffect(() =&gt; {}, [])      ===   componentDidMount<br> useEffect(() =&gt; () =&gt; {})    ===   componentWillUumount<br> 注意：如果是要在此hook中请求数据，那么请求函数得要自执行</p>
<h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>此hook类似于VUE中的计算属性，可以监测某个值的变化，根据变化值计算新值<br>同时此hook也会缓存计算结果。如果监测值没有发生变化，即使组件重新渲染，也不会重新计算，此行为有助于避免在每个渲染上进行昂贵的计算，可做性能优化</p>
<h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><p>性能优化 组件重新渲染之前判断组件有没有发生变化，<br>如果本组件中的数据没有发生变化，阻止更新<br>和useMemo显著的区别是前者阻止组件更新，后者监测某个值的变化来更新</p>
<h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>性能优化 缓存函数，使组件重新渲染时得到相同的函数实例<br>理解就是父组件传值给子组件情况下，如果父组件重新渲染，因为传值的变化子组件这时候也重新渲染了（函数实例也发生改变了），这不是我们想要的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const resetCount &#x3D; useCallback(()&#x3D;&gt;setCount(0),[setCount])</span><br></pre></td></tr></table></figure>
<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p> 获取DOM对象<br> 跨组建周期保存数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const box &#x3D; useRef()</span><br><span class="line">return &lt;div ref&#x3D;&#123;box&#125;&gt;app&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 持续更新中~</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>Redux</title>
    <url>/2020/04/13/react/redux/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>都知道vue有vuex状态管理工具，那肯定react也有，那么今天我们就来简单的聊一聊redux</p>
<h3 id="核心概念及流程"><a href="#核心概念及流程" class="headerlink" title="核心概念及流程"></a>核心概念及流程</h3><p> view(视图)——&gt;(dispacth)——&gt;actions(对象)——&gt;reducer(函数)——&gt;store(容器)——&gt;(subscribe)——&gt;view(视图)</p>
<p> Store: 存储状态的容器，Js对象<br> View：视图 HTML页面<br> Actions：对象，描述对状态进行怎样的操作<br> Reducers: 函数，操作状态并返回新函数</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>函数式编程的柯里化</title>
    <url>/2020/04/07/javascript/02/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我不知道大家有没有发现，你做前端做了几年之后，突然间再让你复盘一下以前学过的基础知识的时候，你突然会发现自己好像记不太清了，我相信这是很多人的痛点，这时候我欧俄美就需要好好的总结下以前学的东西，并以此作为笔记录下来，只有通过此方法，日后你才会有充足的准备来应对接下来的各种变化。接下来我就来简单的为大家梳理一下以前学过的一些东西</p>
<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><p>数据类型我们分为两大类，一是基本类型，又叫值类型，第二种是引用类型，接下来我们就来说说两者具体包含那些<br>一：基本(值)类型<br>    String: 任意字符串<br>    Number: 任意数字<br>    boolean: true/false<br>    undefined: undefined // 已声明未赋值<br>    null: null     // 此类型一般在初始赋值前表明接下来赋值为对象和运算结束后改为垃圾对象被浏览器内的垃圾回收器回收<br>二：引用(对象)类型<br>    Object：任意对象类型<br>    Function: 一种特殊的对象(可执行)<br>    Array: 一种特别的对象(数值下标的集合,内部数据有序的)</p>
<h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><h5 id="基本类型的判断"><a href="#基本类型的判断" class="headerlink" title="基本类型的判断"></a>基本类型的判断</h5><pre><code>    typeof: 返回数据类型的字符串表达 &quot;undefined&quot;/数值/字符串/布尔/function;注意：此API中object与null不能区别、object与array不能区别
    instanceof: 判断对象的具体类型，判断A是不是构造函数B的实例
    ===： 可以判断undefined、null
</code></pre>
<h4 id="引用数据类型的判断"><a href="#引用数据类型的判断" class="headerlink" title="引用数据类型的判断"></a>引用数据类型的判断</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var b1 &#x3D;&#123;</span><br><span class="line">    b2:[1,&#39;abc&#39;,console.log],</span><br><span class="line">    b3:function ()&#123;</span><br><span class="line">        console.log(&#39;b3)</span><br><span class="line">        return function() &#123;</span><br><span class="line">            return &#39;js&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b1 instanceof Object, b1 instanceof Array) &#x2F;&#x2F;true false</span><br><span class="line">console.log(b1.b2 instanceof Array , b1.b2 instanceof Object) &#x2F;&#x2F;true true</span><br><span class="line">console.log(b1.b3 instanceof Function, b1.b2 instanceof Object) &#x2F;&#x2F;true true</span><br><span class="line">console.log(typeof b1.b3 &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#x2F;&#x2F;true</span><br><span class="line">console.log(typeof b1.b[2] &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">console.log(b1.b3()) &#x2F;&#x2F;这里返回我们return那个函数，所以我们需要再次通过()来进行调用</span><br><span class="line">console.log(b1.b3()()) &#x2F;&#x2F;js</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后一个题外话：我们如何区分数据类型和变量类型呢？</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>函数式编程的柯里化</title>
    <url>/2020/04/07/javascript/curry/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 在聊函数柯里化之前我们要知道一下概念：</p>
<ol>
<li>什么是高阶函数，什么是回调函数？<br>我们都知道函数可以作为参数传递到函数中，那么这个作为参数的函数就叫做回调函数、而使用这个参数的函数就叫做高阶函数</li>
<li>那什么是函数式编程呢？<br>高阶函数执行的时候,根据回调函数内部的逻辑不同高阶函数的执行结果也会有所不同，这就叫函数式编程</li>
</ol>
<hr>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>上面我们了解了什么是函数式编程，那么函数柯里化其实就是函数式编程的一个重要思想，也是高阶函数的一个重要应用。就是给函数分步骤传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这期间可嵌套多层这样的接收部分参数的函数，直至返回最后的结果。</p>
<h4 id="1-简单的柯里化"><a href="#1-简单的柯里化" class="headerlink" title="1.简单的柯里化"></a>1.简单的柯里化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 原函数</span><br><span class="line">function sum(a,b,c)&#123;</span><br><span class="line">    return a+b+c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用原函数</span><br><span class="line">sum(1,2,3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 柯里化函数</span><br><span class="line">function sumCurry(a)&#123;</span><br><span class="line"> return function(b)&#123;</span><br><span class="line">     return function(c)&#123;</span><br><span class="line">         return a+b+c</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 调用柯里化函数</span><br><span class="line">sumCurry(1)(2)(3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这就是一个最基本的柯里化拆分， 柯里化后的函数<code>sumCurry</code>每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，在返回的最后一个函数内部执行求和操作，这其实利用了闭包的特性来实现的。</p>
<h4 id="2-通用柯里化函数"><a href="#2-通用柯里化函数" class="headerlink" title="2.通用柯里化函数"></a>2.通用柯里化函数</h4><p>上面的柯里化函数只是最基本最简单的函数，并没有涉及到高阶函数，也没有通用性，面对形参个数不定或者不知道的函数时就束手无策了，那么下面我们就用<code>ES6</code>来封装一个通用的柯里化转换函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function curry (func)&#123;</span><br><span class="line">    return function curriedFn(...args)&#123;</span><br><span class="line">        if( args.length &lt; func.length )&#123;</span><br><span class="line">            return function()&#123;</span><br><span class="line">                return curriedFn(...args.concat.(Array.from(arguments)))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return func(...args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h4><p>1.函数的柯里化可以让我们给一个函数传递较少的参数得到一个已经记住的某些固定参数的新函数<br>2.这是一种对函数参数的’缓存’<br>3.让函数变的更灵活，让函数的粒度更小<br>可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>防抖节流</title>
    <url>/2020/04/06/javascript/debounce/</url>
    <content><![CDATA[<h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h3><p>原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。<br>适用场景：<br>按钮提交场景：防止多次提交按钮，只执行最后提交的一次<br>搜索框联想场景：防止联想发送请求，只发送最后一次输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait) &#123;</span><br><span class="line">    let timeout;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        const context &#x3D; this;</span><br><span class="line">        const args &#x3D; arguments;</span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout &#x3D; setTimeout(function()&#123;</span><br><span class="line">            func.apply(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h3><p>原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。<br>适用场景<br>拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动<br>缩放场景：监控浏览器resize</p>
<h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">               let hasRun &#x3D; false;</span><br><span class="line">               return function () &#123;</span><br><span class="line">                   if (hasRun) &#123;</span><br><span class="line">                       return;</span><br><span class="line">                   &#125;</span><br><span class="line">                   hasRun &#x3D; true;</span><br><span class="line">                   setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                       hasRun &#x3D; false;</span><br><span class="line">                       fn.apply(this, arguments);</span><br><span class="line">                   &#125;, delay);</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;);</span><br><span class="line">       let count &#x3D; 0;</span><br><span class="line">       function myEvent()&#123;</span><br><span class="line">           mydiv.innerText &#x3D; count++;</span><br><span class="line">       &#125;        </span><br><span class="line">       mydiv.addEventListener(&#39;click&#39;, throttle(myEvent,2000));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let div &#x3D; document.querySelector(&#39;div&#39;);</span><br><span class="line">var count &#x3D; 0;</span><br><span class="line">function myEvent() &#123;</span><br><span class="line">    div.innerText &#x3D; count++;</span><br><span class="line">&#125;</span><br><span class="line">div.onclick &#x3D; throttle(myEvent,2000);</span><br><span class="line">function throttle(func, wait) &#123;</span><br><span class="line">    let pre &#x3D; 0;</span><br><span class="line">    return function () &#123;</span><br><span class="line">        let now &#x3D; new Date().getTime();</span><br><span class="line">        if (now - pre &gt; wait) &#123;</span><br><span class="line">            pre &#x3D; now;</span><br><span class="line">            func.apply(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>vue-Router</title>
    <url>/2020/04/08/vue/vue-Router/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let _Vue &#x3D; null;</span><br><span class="line"></span><br><span class="line">export default class VueRouter &#123;</span><br><span class="line">  static install(Vue) &#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 判断当前插件是否已经被安装</span><br><span class="line">    if (VueRouter.install.installed) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    VueRouter.install.installed &#x3D; true;</span><br><span class="line">    &#x2F;&#x2F; 2. 把 Vue 构造函数记录到全局变量</span><br><span class="line">    _Vue &#x3D; Vue;</span><br><span class="line">    &#x2F;&#x2F; 3. 把创建的 Vue 实例时所传入的 router 对象注入到 Vue 实例上</span><br><span class="line">    &#x2F;&#x2F; 混入</span><br><span class="line">    _Vue.mixin(&#123;</span><br><span class="line">      beforeCreate() &#123;</span><br><span class="line">        if (this.$options.router) &#123;</span><br><span class="line">          _Vue.prototype.$router &#x3D; this.$options.router;</span><br><span class="line">          this.$options.router.init();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    this.options &#x3D; options;</span><br><span class="line">    this.routeMap &#x3D; &#123;&#125;;</span><br><span class="line">    this.data &#x3D; _Vue.observable(&#123;</span><br><span class="line">      current: &quot;&#x2F;&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    this.initRouterMap();</span><br><span class="line">    this.initComponents(_Vue);</span><br><span class="line">    this.initEvent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initRouterMap() &#123;</span><br><span class="line">    &#x2F;&#x2F; 遍历所有的路由规则，把路由规则解析成键值对的形式 存储到 routerMap 中</span><br><span class="line">    this.options.routes.forEach((route) &#x3D;&gt; &#123;</span><br><span class="line">      this.routeMap[route.path] &#x3D; route.component;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initComponents(Vue) &#123;</span><br><span class="line">    Vue.component(&quot;router-link&quot;, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        to: String,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; template: &#96;</span><br><span class="line">      &#x2F;&#x2F;   &lt;a :href&#x3D;&quot;to&quot;&gt;</span><br><span class="line">      &#x2F;&#x2F;     &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">      &#x2F;&#x2F;   &lt;&#x2F;a&gt;</span><br><span class="line">      &#x2F;&#x2F; &#96;,</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        return h(</span><br><span class="line">          &quot;a&quot;,</span><br><span class="line">          &#123;</span><br><span class="line">            attrs: &#123;</span><br><span class="line">              href: this.to,</span><br><span class="line">            &#125;,</span><br><span class="line">            on: &#123;</span><br><span class="line">              click: this.clickHandler,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          [this.$slots.default]</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        clickHandler(e) &#123;</span><br><span class="line">          history.pushState(&#123;&#125;, &quot;&quot;, this.to);</span><br><span class="line">          this.$router.data.current &#x3D; this.to;</span><br><span class="line">          e.preventDefault();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    Vue.component(&quot;router-view&quot;, &#123;</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        console.log(self);</span><br><span class="line">        const component &#x3D; self.routeMap[self.data.current];</span><br><span class="line">        return h(component);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initEvent() &#123;</span><br><span class="line">    window.addEventListener(&quot;popstate&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      this.data.current &#x3D; window.location.pathname;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vuex</title>
    <url>/2020/04/14/vue/vuex/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期为了出去面试看看，总结了下自己学的东西会，突然发现自己有一部分东西只停留在会用的阶段，没有怎么了解过他的实现，所以就有了这篇文章，如有问题还请及时告知，万分感谢<del>(大佬轻喷</del>)</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>vuex采用集中式的方式存储需要共享的状态，是专门为vue设计的状态管理库<br>state：驱动应用的数据源<br>view：以声明的方式将state映射到视图<br>actions，响应在view上的用户输入导致的状态变化</p>
<p>store中主要有一下几个api<br>state: 主要用来存储数据<br>getter: 类似于组件中的计算属性，如果想要对state中的数据做简单的处理，就可以运用此方法<br>mutation: 主要对数据进行同步操作的处理<br>action: 主要对数据进行异步操作的处理，但是还是会流向mutation，以避免在vuetools中报错<br>module:可以生成多个store类</p>
<p>接下来我们就来简单实现下store类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let _Vue &#x3D; null</span><br><span class="line"></span><br><span class="line">class Store&#123;</span><br><span class="line">    cinstructor (options) &#123;</span><br><span class="line">        const &#123;</span><br><span class="line">            state &#x3D; &#123;&#125;,</span><br><span class="line">            getters &#x3D; &#123;&#125;</span><br><span class="line">            mutations &#x3D; &#123;&#125;</span><br><span class="line">            actions &#x3D; &#123;&#125;</span><br><span class="line">        &#125; &#x3D; optinos</span><br><span class="line">        this.state &#x3D; _Vue.observable(state)</span><br><span class="line">        this.getters &#x3D; Object.create(null)</span><br><span class="line">        Object.keys(getters).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">            Object.defineProperty(this.getters, key, &#123;</span><br><span class="line">                get: ()&#x3D;&gt; getters[key](state)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        this._mutations &#x3D; mutations</span><br><span class="line">        this._actions &#x3D; actions</span><br><span class="line"></span><br><span class="line">        commit ( type,payload ) &#123;</span><br><span class="line">            this._mutations[type](this.state, payload)</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch (type, payload) &#123;</span><br><span class="line">            this._actions[type]( this , payload)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果要使用的话我们就把创建Vue实例的时候传入的store对象注入到Vue原型上的$store,<br>在所有组件中可以通过this.$store。来获取到vuex中的仓库，从而可以在所有组件中共享状态，<br>在install中我们获取不到Vue的实例，所以这里通过beforeCreate来获取vue实例，从而拿到选项中的store对象<br>还得模拟一下挂载的install方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function install (Vue) &#123;</span><br><span class="line">    _Vue &#x3D; Vue</span><br><span class="line">    _Vue.mixin(&#123;</span><br><span class="line">        beforeCreate () &#123;</span><br><span class="line">            if (this.$options.store) &#123;</span><br><span class="line">               &#x2F;&#x2F;  判断当前vue实例的$options中是否存在store,如果是组件实例那就没有这个store选项，就不需要做这件事情</span><br><span class="line">                _Vue.prototype.$store &#x3D; this.$options.store</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们导出一下就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    Store,</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外需要注意的是：<br>vuex刷新数据丢失的问题，其实答案很简单，因为js代码运行在内存中，代码运行时所有的变量和函数都是保存在 内存 中的，但我们 按下F5的时候以前申请的内存将会被释放，并会被重新加载js脚本，变量重新赋值。所以在我们使用vuex的时候只要一刷新数据就没了。如果我们想要持久化保存可以使用 localStorage 或者 sessionStorage 存储本地数据保证刷新后数据不会丢失。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>web前端性能优化</title>
    <url>/2020/04/10/xingneng/web/</url>
    <content><![CDATA[<h4 id="1-打包公共代码"><a href="#1-打包公共代码" class="headerlink" title="1.打包公共代码"></a>1.打包公共代码</h4><p>通过webpack将公共的模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用，这会带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。在webpack的splitChunks就能够把多次引入的包，都打包到一个文件中。</p>
<h4 id="2-按需加载"><a href="#2-按需加载" class="headerlink" title="2.按需加载"></a>2.按需加载</h4><p>在单页面中，有多个路由，使用webpack的按需加载就能达到单独访问某个页面的时候单独某个的页面代码，如import(/<em>webpackChunkName: ‘xx’</em> ‘yourpath’/)</p>
<h4 id="3-使用CDN"><a href="#3-使用CDN" class="headerlink" title="3.使用CDN"></a>3.使用CDN</h4><p>CDN全称是Content Delivery Network，即内容分发网络，它能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度</p>
<h4 id="4-使用静态资源分域存放来增加下载并行数"><a href="#4-使用静态资源分域存放来增加下载并行数" class="headerlink" title="4.使用静态资源分域存放来增加下载并行数"></a>4.使用静态资源分域存放来增加下载并行数</h4><p>浏览器在同一时刻向同一个域名请求文件的并行下载数是有限的，因此可以利用多个域名的主机来存放不同的静态资源，增大页面加载时资源的并行下载数，缩短页面资源加载的时间。通常根据多个域名来分别存储 JavaScript、CSS 和图片文件。</p>
<h3 id="5-减少js、css阻塞"><a href="#5-减少js、css阻塞" class="headerlink" title="5.减少js、css阻塞"></a>5.减少js、css阻塞</h3><h4 id="1-js组塞"><a href="#1-js组塞" class="headerlink" title="1. js组塞"></a>1. js组塞</h4><p>当html解析遇到js会先下载和执行js文件，这是为了防止js操作了dom等情况的发生。但我们作为操作者，可以人为的指定，那些元素可以延迟加载。<br>为script标签指定 async 或 defer来延迟脚本。<br>async表示js不会阻塞，但会在下载完成后立刻执行<br>defer则会在下载完成并且整个文档解析完成、DOMContentLoaded事件被触发前开始执行</p>
<h4 id="2-css组塞"><a href="#2-css组塞" class="headerlink" title="2.css组塞"></a>2.css组塞</h4><p>css会阻塞html进行渲染，但是为了界面没有任何样式的展现在用户面前，因此我们需要将css提前</p>
<h3 id="6-避免回流和重绘"><a href="#6-避免回流和重绘" class="headerlink" title="6.避免回流和重绘"></a>6.避免回流和重绘</h3><h3 id="7-懒加载"><a href="#7-懒加载" class="headerlink" title="7.懒加载"></a>7.懒加载</h3><h3 id="8-减少DOM操作"><a href="#8-减少DOM操作" class="headerlink" title="8.减少DOM操作"></a>8.减少DOM操作</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>Promise 原理及实现</title>
    <url>/2020/04/08/javascript/Promise/</url>
    <content><![CDATA[<h4 id="表述"><a href="#表述" class="headerlink" title="表述"></a>表述</h4><p>Promise就是将异步任务队列化，将多个异步任务按照顺序输出，同时用链式调用解决回调地狱的问题。<br>今天我们就来好好剖析下Promise的原理：</p>
<h4 id="Promise规范"><a href="#Promise规范" class="headerlink" title="Promise规范"></a>Promise规范</h4><p>1.存在三个状态：等待态(<code>pending</code>)，执行态(<code>fulfilled</code>)，失败态(<code>rejected</code>)<br>2.初始态为等待态，可以转化为执行态和失败态<br>3.执行态不可转化为其他状态，且必须有一个不可变的终值(value)<br>4.失败态不可转化为其他状态，且必须有一个不可变的原因(reason)<br>5.必须提供一个<code>then</code>方法，以供访问其当前值，如果状态成功调用成功回调函数、如果状态是失败，调用失败回调函数<br>6.then方法提供两个参数：<code>onFulfilled</code>和<code>onRejected</code><br>7.<code>onFulfilled</code>和<code>onRejected</code>如果不是函数类型，必须忽略其<br>8.如果<code>executor</code>执行报错，直接执行reject<br>9.不同的<code>promise</code>可以相互套用<br>更多详细内容还请自行参考<code>Promise A+</code>规范</p>
<h3 id="1-不考虑异步的Promise"><a href="#1-不考虑异步的Promise" class="headerlink" title="1.不考虑异步的Promise"></a>1.不考虑异步的Promise</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">            successCallback(this.value)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此，一个不考虑异步情况的简单版Promise就出来了.</p>
<h3 id="2-加入异步逻辑和then方法的多次调用"><a href="#2-加入异步逻辑和then方法的多次调用" class="headerlink" title="2.加入异步逻辑和then方法的多次调用"></a>2.加入异步逻辑和then方法的多次调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">            successCallback(this.value)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-添加then方法的链式调用和取得then方法的返回值"><a href="#3-添加then方法的链式调用和取得then方法的返回值" class="headerlink" title="3.添加then方法的链式调用和取得then方法的返回值"></a>3.添加then方法的链式调用和取得then方法的返回值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line"></span><br><span class="line">           let x &#x3D; successCallback(this.value)</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">           resolve(x)</span><br><span class="line"></span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个成功的返回值<code>x</code>只能传递普通的值，那如果是一个promise对象呢？<br>这时候我们就要看promise返回的对象的结果，再根据返回的结果决定是调用resolve，还是reject。<br>这里有个问题可能大家已经想到了, 这个返回值有可能是为promise对象的情况,<br>而且<code>在then方法的回调函数当中，不能返回当前这个then方法所返回的promise对象的</code>,因为这样就触发了promise的循环调用，浏览器就会报错<br>那么，根据上述情况, 接下来我们就要再改造一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        executor(this.resolve, this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line">            &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码</span><br><span class="line">            setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">                let x &#x3D; successCallback(this.value)</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">            failCallback(this.reason)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(successCallback)</span><br><span class="line">            this.failCallback.push(failCallback)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolvePromise( promise2, x, resolve, reject) &#123;</span><br><span class="line">    &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错</span><br><span class="line">    if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class="line">        return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;))</span><br><span class="line">    &#125;</span><br><span class="line">    if (x instanceof MyPromise) &#123;</span><br><span class="line">        &#x2F;&#x2F; promise对象</span><br><span class="line">        &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason))</span><br><span class="line">        x.then(resolve,reject)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-添加错误处理"><a href="#4-添加错误处理" class="headerlink" title="4.添加错误处理"></a>4.添加错误处理</h3><p>1.当执行器<code>executor</code>错误时<br>2.<code>then</code>方法当中的回调函数报错时<br>3.上述代码只处理了成功状态，现在我们要将失败或者异步时的状态也一并处理了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            this.reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()()</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line">            &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码</span><br><span class="line">            setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; successCallback(this.value);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">             setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; failCallback(this.reason);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(()&#x3D;&gt;&#123;</span><br><span class="line">                setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; successCallback(this.value);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">            &#125;)</span><br><span class="line">            this.failCallback.push(()&#x3D;&gt;&#123;</span><br><span class="line">               setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; failCallback(this.reason);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolvePromise( promise2, x, resolve, reject) &#123;</span><br><span class="line">    &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错</span><br><span class="line">    if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class="line">        return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;))</span><br><span class="line">    &#125;</span><br><span class="line">    if (x instanceof MyPromise) &#123;</span><br><span class="line">        &#x2F;&#x2F; promise对象</span><br><span class="line">        &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason))</span><br><span class="line">        x.then(resolve,reject)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，我知道各位道友看到这一步可能有点厌烦了, 那么我宣布一个事情：<br>咱们这个Promise类的核心功能已经实现了&#x1F44d;<br>当然，还想知道更多的咱们一起往下看</p>
<h3 id="5-将then方法的参数变成可选参数"><a href="#5-将then方法的参数变成可选参数" class="headerlink" title="5.将then方法的参数变成可选参数"></a>5.将then方法的参数变成可选参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    constructor (executor)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            executor(this.resolve, this.reject)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            this.reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;promise 状态</span><br><span class="line">    status &#x3D; PENDING;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成功和失败的信息</span><br><span class="line">    value &#x3D; undefined;</span><br><span class="line">    reason &#x3D; undefined;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;成功和失败的回调</span><br><span class="line">    successCallback &#x3D; [];</span><br><span class="line">    failCallback &#x3D; [];</span><br><span class="line"></span><br><span class="line">    resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为成功</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 保存成功之后的值</span><br><span class="line">        this.value &#x3D; value</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 判断成功回调是否存在 存在即调用</span><br><span class="line">        while (this.successCallback.length) this.successCallback.shift()()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">         &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行</span><br><span class="line">        if(this.status !&#x3D;&#x3D; PENDING) return;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 将状态更改为失败</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;保存失败的原因</span><br><span class="line">        this.reason &#x3D; reason</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断失败回调是否存在，存在及调用</span><br><span class="line">        while (this.failCallback.length) this.failCallback.shift()()</span><br><span class="line">    &#125;</span><br><span class="line">    then ( successCallback, failCallback ) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 当then()方法为空的时候其实等同于&#96;&#96;then(value &#x3D;&gt; value)&#96;&#96;</span><br><span class="line">        successCallback &#x3D; successCallback ? successCallback:value &#x3D;&gt; value;</span><br><span class="line">        failCallback &#x3D; failCallback ? failCallback:reason &#x3D;&gt; &#123; throw reason &#125;;</span><br><span class="line"></span><br><span class="line">        let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 判断状态</span><br><span class="line">        if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123;</span><br><span class="line">            &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码</span><br><span class="line">            setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; successCallback(this.value);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123;</span><br><span class="line"></span><br><span class="line">             setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; failCallback(this.reason);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F; 等待、将成功和失败的回调存储起来</span><br><span class="line">            this.successCallback.push(()&#x3D;&gt;&#123;</span><br><span class="line">                setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; successCallback(this.value);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">            &#125;)</span><br><span class="line">            this.failCallback.push(()&#x3D;&gt;&#123;</span><br><span class="line">               setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">                try&#123;</span><br><span class="line">                    let x &#x3D; failCallback(this.reason);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调</span><br><span class="line">                resolvePromise( promise2, x, resolve, reject)</span><br><span class="line">                &#125;catch (e)&#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;, 0)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        return promise2</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolvePromise( promise2, x, resolve, reject) &#123;</span><br><span class="line">    &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错</span><br><span class="line">    if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class="line">        return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;))</span><br><span class="line">    &#125;</span><br><span class="line">    if (x instanceof MyPromise) &#123;</span><br><span class="line">        &#x2F;&#x2F; promise对象</span><br><span class="line">        &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason))</span><br><span class="line">        x.then(resolve,reject)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 普通值</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展1：实现promise-all-方法"><a href="#拓展1：实现promise-all-方法" class="headerlink" title="拓展1：实现promise.all()方法"></a>拓展1：实现promise.all()方法</h3><p>此方法主要用来解决异步并发问题的，此方法允许我们按照异步代买调用的顺序得到异步代码执行的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    static all (array) &#123;</span><br><span class="line">        let result &#x3D; []</span><br><span class="line">        let index &#x3D; 0</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        return new MyPromise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">             function addData (key, value) &#x3D;&gt;&#123;</span><br><span class="line">                reslut[key] &#x3D; value;</span><br><span class="line">                index++;</span><br><span class="line"></span><br><span class="line">                if (index &#x3D;&#x3D;&#x3D; array.length) &#123;</span><br><span class="line"></span><br><span class="line">                    resolve(result)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for( let i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                let current &#x3D; array[i]</span><br><span class="line">                if (current instanceof MyPromise) &#123;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; promise 对象</span><br><span class="line">                    current.then( value &#x3D;&gt; addData(i, value), reason &#x3D;&gt; reject(reason))</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    &#x2F;&#x2F; 普通值</span><br><span class="line">                    addData(i, array[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展2：实现promise-resolve-方法"><a href="#拓展2：实现promise-resolve-方法" class="headerlink" title="拓展2：实现promise.resolve()方法"></a>拓展2：实现promise.resolve()方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    static resolve(value) &#123;</span><br><span class="line">        if ( value instanceof MyPromise) return value;</span><br><span class="line">        return new MyPromise(resolve &#x3D;&gt; resolve(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="拓展3：-实现promise-finally-方法"><a href="#拓展3：-实现promise-finally-方法" class="headerlink" title="拓展3： 实现promise.finally()方法"></a>拓展3： 实现promise.finally()方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    finally (callback) &#123;</span><br><span class="line">        return this.then(value &#x3D;&gt; &#123;</span><br><span class="line">            return MyPromise.resolve(callback()).then(() &#x3D;&gt; value)</span><br><span class="line">        &#125;, reason &#x3D;&gt; &#123;</span><br><span class="line">            return MyPromise.resolve(callback()).then(() &#x3D;&gt; &#123; throw reason&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="拓展4：-实现promise-catch-方法"><a href="#拓展4：-实现promise-catch-方法" class="headerlink" title="拓展4： 实现promise.catch()方法"></a>拓展4： 实现promise.catch()方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待</span><br><span class="line">const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败</span><br><span class="line">class MyPromise&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    catch (failCallback) &#123;</span><br><span class="line">        return this.then(undefined, failCallback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
</search>
