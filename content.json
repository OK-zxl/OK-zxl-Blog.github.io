{"meta":{"title":"Soliton's Blog","subtitle":"","description":"","author":"Soliton","url":"http://example.com","root":"/"},"pages":[{"title":"个人资料","date":"2021-02-14T16:55:29.956Z","updated":"2021-02-14T16:55:29.956Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"本人18级计算机专业毕业，是一枚96年的程序员。迄今为止三年时间都投身于互联网教育行业。目前在魔都一家200人的在线教育企业做前端开发。现在负责UG（User Growth）项目组的前端开发 技术栈熟练：JavaScript、Vue和React周边生态、小程序云开发熟悉：Node、Express、koa2、mongoDB CD/CI流程的搭建了解：Golang、Nginx、自动化部署 个人兴趣爱好闲暇之余喜欢：看电影、NBA、打篮球 自我评价工作三年，黑发不知勤学早，白首方悔读书迟。特别是在前程无忧实习的一年，身边大神很多，要学习的也有很多很多，在不断的自我反省中慢慢成长。这是我一直以来保持的目标，也会一直保持下去，按照前辈们的脚步走下去，希望有一天能追赶上前辈们。"},{"title":"归档","date":"2020-04-05T04:06:45.000Z","updated":"2021-02-14T15:56:03.520Z","comments":false,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-15T14:47:48.041Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2021-02-14T16:04:51.000Z","updated":"2021-02-14T16:04:51.427Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-04T05:15:29.000Z","updated":"2021-02-14T15:55:10.976Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-27T05:16:03.000Z","updated":"2021-02-14T15:56:21.459Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"javascript/1","date":"2021-03-11T14:21:52.982Z","updated":"2021-03-11T14:21:52.982Z","comments":true,"path":"2021/03/11/javascript/1/","link":"","permalink":"http://example.com/2021/03/11/javascript/1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"你好，很荣幸您能来到我的博客！","slug":"hello-world","date":"2021-02-14T15:36:09.864Z","updated":"2021-02-16T07:53:14.257Z","comments":false,"path":"2021/02/14/hello-world/","link":"","permalink":"http://example.com/2021/02/14/hello-world/","excerpt":"","text":"此博客为本人近期才正式上传，此前一直放在本地(别问为什么，问就是害怕被大佬笑话)，中途因为个人原因和工作繁忙一直未能上线，逢此春节七天留沪过年的时间，经过激烈的思想斗争，最终还是上来了，望大佬轻喷~，有错误的地方还请务必提醒笔者改正，万分感谢！","categories":[],"tags":[]},{"title":"vuex","slug":"vue/vuex","date":"2020-04-14T04:44:34.000Z","updated":"2021-03-12T00:35:06.985Z","comments":true,"path":"2020/04/14/vue/vuex/","link":"","permalink":"http://example.com/2020/04/14/vue/vuex/","excerpt":"","text":"前言近期为了出去面试看看，总结了下自己学的东西会，突然发现自己有一部分东西只停留在会用的阶段，没有怎么了解过他的实现，所以就有了这篇文章，如有问题还请及时告知，万分感谢(大佬轻喷) 核心概念vuex采用集中式的方式存储需要共享的状态，是专门为vue设计的状态管理库state：驱动应用的数据源view：以声明的方式将state映射到视图actions，响应在view上的用户输入导致的状态变化 store中主要有一下几个apistate: 主要用来存储数据getter: 类似于组件中的计算属性，如果想要对state中的数据做简单的处理，就可以运用此方法mutation: 主要对数据进行同步操作的处理action: 主要对数据进行异步操作的处理，但是还是会流向mutation，以避免在vuetools中报错module:可以生成多个store类 接下来我们就来简单实现下store类 1234567891011121314151617181920212223242526272829let _Vue &#x3D; nullclass Store&#123; cinstructor (options) &#123; const &#123; state &#x3D; &#123;&#125;, getters &#x3D; &#123;&#125; mutations &#x3D; &#123;&#125; actions &#x3D; &#123;&#125; &#125; &#x3D; optinos this.state &#x3D; _Vue.observable(state) this.getters &#x3D; Object.create(null) Object.keys(getters).forEach(key &#x3D;&gt; &#123; Object.defineProperty(this.getters, key, &#123; get: ()&#x3D;&gt; getters[key](state) &#125;) &#125;) this._mutations &#x3D; mutations this._actions &#x3D; actions commit ( type,payload ) &#123; this._mutations[type](this.state, payload) &#125; dispatch (type, payload) &#123; this._actions[type]( this , payload) &#125; &#125;&#125; 如果要使用的话我们就把创建Vue实例的时候传入的store对象注入到Vue原型上的$store,在所有组件中可以通过this.$store。来获取到vuex中的仓库，从而可以在所有组件中共享状态，在install中我们获取不到Vue的实例，所以这里通过beforeCreate来获取vue实例，从而拿到选项中的store对象还得模拟一下挂载的install方法 1234567891011function install (Vue) &#123; _Vue &#x3D; Vue _Vue.mixin(&#123; beforeCreate () &#123; if (this.$options.store) &#123; &#x2F;&#x2F; 判断当前vue实例的$options中是否存在store,如果是组件实例那就没有这个store选项，就不需要做这件事情 _Vue.prototype.$store &#x3D; this.$options.store &#125; &#125; &#125;)&#125; 最后我们导出一下就可以了 12345export default &#123; Store, install&#125; 另外需要注意的是：vuex刷新数据丢失的问题，其实答案很简单，因为js代码运行在内存中，代码运行时所有的变量和函数都是保存在 内存 中的，但我们 按下F5的时候以前申请的内存将会被释放，并会被重新加载js脚本，变量重新赋值。所以在我们使用vuex的时候只要一刷新数据就没了。如果我们想要持久化保存可以使用 localStorage 或者 sessionStorage 存储本地数据保证刷新后数据不会丢失。","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[]},{"title":"Redux","slug":"react/redux","date":"2020-04-13T04:44:34.000Z","updated":"2021-03-10T04:56:43.480Z","comments":true,"path":"2020/04/13/react/redux/","link":"","permalink":"http://example.com/2020/04/13/react/redux/","excerpt":"","text":"前言都知道vue有vuex状态管理工具，那肯定react也有，那么今天我们就来简单的聊一聊redux 核心概念及流程 view(视图)——&gt;(dispacth)——&gt;actions(对象)——&gt;reducer(函数)——&gt;store(容器)——&gt;(subscribe)——&gt;view(视图) Store: 存储状态的容器，Js对象 View：视图 HTML页面 Actions：对象，描述对状态进行怎样的操作 Reducers: 函数，操作状态并返回新函数","categories":[{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"}],"tags":[]},{"title":"react Hooks","slug":"react/reactHooks","date":"2020-04-12T04:44:34.000Z","updated":"2021-03-10T04:44:12.468Z","comments":true,"path":"2020/04/12/react/reactHooks/","link":"","permalink":"http://example.com/2020/04/12/react/reactHooks/","excerpt":"","text":"前言我们都知道rewact开发有两种组件开发模式，一是函数式组件开发，二是类组件式开发，但是相比于函数式组件开发类组件有很多不足之处： 1.缺少逻辑复用机制为了服用逻辑增加无实际渲染效果的组件，增加了组件层级显得十分臃肿，增加了调试的难度以及运行效率的降低。 2.类组件经常会变得很复杂难以维护将一组相干的业务逻辑拆分到了多个生命周期函数之中在一个生命周期函数内存在多个不相干的业务逻辑 3.类成员方法不能保证this指向的正确性为此react16.8版本出了一个非常强大的更新，那就是react hooks，很好的解决了类组件的不足，这让我们能更好的把精力集中在函数式组件的开发之中，今天我们就来聊一聊这个react hooks useState 此hook是可以让函数式组件保存状态 123import &#123; useState &#125; from &#39;react&#39;····const [num setNum] &#x3D; (0) useState细节: 1.接收唯一的参数即状态初始值，初始值可以为任意数据类型 2.返回值为数组，数组中存储状态值和更改状态值的方法，方法名约定以set开头 3.方法可以被多次调用，用以保存不同状态值 4.参数可以是一个函数，函数返回什么，初始状态就是什么，函数只会被调用一次，用在初始值为动态值的情况下 注意：在参数为一个函数的时候，如果页面渲染依赖返回id结果那么这个执行语句就要被放在回调函数内部 useReducer 此hook是另一种让函数组件保存状态的方式，和redux极其相似 1234567891011121314import &#123; useReducer &#125; from &#39;react&#39;function reducer (state, action) &#123; switch (action.type) &#123; case &#39;initAdd&#39;: return state + 1 &#125;&#125;····const [count dispatch] &#x3D; useReducer(reducer, 0)return &lt;div&gt;&lt;span&gt;&#123;count&#125;&lt;&#x2F;span&gt;&lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type:&#39;initAdd&#39;&#125;)&#125;&gt;&lt;&#x2F;div&gt; useContext用于简化跨组件通信createContext函数代码 useEffect() 让函数组件拥有处理副作用的能力。类似于生命周期 我们可以将此hook看成是类组件中componentDidMount、componentDidUpdate、componentWillUumount三个函数的组合 useEffect(()=&gt;{}) === componentDidMount、componentDidUpdate useEffect(() =&gt; {}, []) === componentDidMount useEffect(() =&gt; () =&gt; {}) === componentWillUumount 注意：如果是要在此hook中请求数据，那么请求函数得要自执行 useMemo此hook类似于VUE中的计算属性，可以监测某个值的变化，根据变化值计算新值同时此hook也会缓存计算结果。如果监测值没有发生变化，即使组件重新渲染，也不会重新计算，此行为有助于避免在每个渲染上进行昂贵的计算，可做性能优化 memo性能优化 组件重新渲染之前判断组件有没有发生变化，如果本组件中的数据没有发生变化，阻止更新和useMemo显著的区别是前者阻止组件更新，后者监测某个值的变化来更新 useCallback性能优化 缓存函数，使组件重新渲染时得到相同的函数实例理解就是父组件传值给子组件情况下，如果父组件重新渲染，因为传值的变化子组件这时候也重新渲染了（函数实例也发生改变了），这不是我们想要的 1const resetCount &#x3D; useCallback(()&#x3D;&gt;setCount(0),[setCount]) useRef 获取DOM对象 跨组建周期保存数据 123const box &#x3D; useRef()return &lt;div ref&#x3D;&#123;box&#125;&gt;app&lt;&#x2F;div&gt; 持续更新中~","categories":[{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"}],"tags":[]},{"title":"事件轮询(Event Loop)","slug":"javascript/eventloop","date":"2020-04-11T05:14:34.000Z","updated":"2021-03-18T11:36:06.187Z","comments":true,"path":"2020/04/11/javascript/eventloop/","link":"","permalink":"http://example.com/2020/04/11/javascript/eventloop/","excerpt":"","text":"概念首选我们都知道js是单线程的，也就是说所有的代码是一行接着一行运行的。此外js提供了宏任务和微任务这两个概念。先说宏任务。宏任务是一个外部脚本文件，一个用户交互触发的事件或一个setTimeout调用的回调函数。为了实现单线程这个概念，js有一个宏任务队列（先进先出），宏任务不断地创建出来塞到队尾，js引擎不断地从队首取任务出来执行。例如：script 、setTimeout、setInterval，setImmediate 微任务是由Promise创建出来的且js中有一个专门的微任务队列来存储微任务。微任务的机制是：当执行完一个任务后，只要有微任务就先执行微任务。宏任务和渲染通通排到后面。例如：Promise.then()或catch()、async函数中的await紧跟函数/语句之后的内容 所谓事件轮询就是我们将一系列具有异步操作的放入任务队列，等主线程执行的同步任务执行完成以后，再从微任务队列里找未执行的任务，如果有那么就执行，如果没有就再去宏任务中寻找，依次循环，这就是事件轮询。 每个宏任务之后，引擎会立即执行微任务队列中的所有任务，然后再执行其他的宏任务，或渲染，或进行其他任何操作。PS:定时器函数的setTimeout在主线程在执行时，他依然会在一个定时器模块内开始计时，等主线程任务执行完成，如果setTimeout的计时结束那么就会立即执行(这里注意，这里只是计时完成，任务还没有开始执行)","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"web前端性能优化","slug":"xingneng/web","date":"2020-04-10T04:44:34.000Z","updated":"2021-03-06T13:13:43.393Z","comments":true,"path":"2020/04/10/xingneng/web/","link":"","permalink":"http://example.com/2020/04/10/xingneng/web/","excerpt":"","text":"1.打包公共代码通过webpack将公共的模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用，这会带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。在webpack的splitChunks就能够把多次引入的包，都打包到一个文件中。 2.按需加载在单页面中，有多个路由，使用webpack的按需加载就能达到单独访问某个页面的时候单独某个的页面代码，如import(/webpackChunkName: ‘xx’ ‘yourpath’/) 3.使用CDNCDN全称是Content Delivery Network，即内容分发网络，它能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度 4.使用静态资源分域存放来增加下载并行数浏览器在同一时刻向同一个域名请求文件的并行下载数是有限的，因此可以利用多个域名的主机来存放不同的静态资源，增大页面加载时资源的并行下载数，缩短页面资源加载的时间。通常根据多个域名来分别存储 JavaScript、CSS 和图片文件。 5.减少js、css阻塞1. js组塞当html解析遇到js会先下载和执行js文件，这是为了防止js操作了dom等情况的发生。但我们作为操作者，可以人为的指定，那些元素可以延迟加载。为script标签指定 async 或 defer来延迟脚本。async表示js不会阻塞，但会在下载完成后立刻执行defer则会在下载完成并且整个文档解析完成、DOMContentLoaded事件被触发前开始执行 2.css组塞css会阻塞html进行渲染，但是为了界面没有任何样式的展现在用户面前，因此我们需要将css提前 6.避免回流和重绘7.懒加载8.减少DOM操作","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[]},{"title":"Next.js+koa项目环境搭建","slug":"react/next","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-26T13:44:21.644Z","comments":true,"path":"2020/04/08/react/next/","link":"","permalink":"http://example.com/2020/04/08/react/next/","excerpt":"","text":"前言自从19年中开始做UG以来，这大半年时间也算完成了从Vue到React的转型，也学会了运用Next.js这个SSR框架，接下来我就手把手教大家初步运用Next.js+Koa搭建一个初步的全栈项目","categories":[{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"}],"tags":[]},{"title":"vue-Router","slug":"vue/vue-Router","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-26T14:53:22.612Z","comments":true,"path":"2020/04/08/vue/vue-Router/","link":"","permalink":"http://example.com/2020/04/08/vue/vue-Router/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394let _Vue &#x3D; null;export default class VueRouter &#123; static install(Vue) &#123; &#x2F;&#x2F; 1. 判断当前插件是否已经被安装 if (VueRouter.install.installed) &#123; return; &#125; VueRouter.install.installed &#x3D; true; &#x2F;&#x2F; 2. 把 Vue 构造函数记录到全局变量 _Vue &#x3D; Vue; &#x2F;&#x2F; 3. 把创建的 Vue 实例时所传入的 router 对象注入到 Vue 实例上 &#x2F;&#x2F; 混入 _Vue.mixin(&#123; beforeCreate() &#123; if (this.$options.router) &#123; _Vue.prototype.$router &#x3D; this.$options.router; this.$options.router.init(); &#125; &#125;, &#125;); &#125; constructor(options) &#123; this.options &#x3D; options; this.routeMap &#x3D; &#123;&#125;; this.data &#x3D; _Vue.observable(&#123; current: &quot;&#x2F;&quot;, &#125;); &#125; init() &#123; this.initRouterMap(); this.initComponents(_Vue); this.initEvent(); &#125; initRouterMap() &#123; &#x2F;&#x2F; 遍历所有的路由规则，把路由规则解析成键值对的形式 存储到 routerMap 中 this.options.routes.forEach((route) &#x3D;&gt; &#123; this.routeMap[route.path] &#x3D; route.component; &#125;); &#125; initComponents(Vue) &#123; Vue.component(&quot;router-link&quot;, &#123; props: &#123; to: String, &#125;, &#x2F;&#x2F; template: &#96; &#x2F;&#x2F; &lt;a :href&#x3D;&quot;to&quot;&gt; &#x2F;&#x2F; &lt;slot&gt;&lt;&#x2F;slot&gt; &#x2F;&#x2F; &lt;&#x2F;a&gt; &#x2F;&#x2F; &#96;, render(h) &#123; return h( &quot;a&quot;, &#123; attrs: &#123; href: this.to, &#125;, on: &#123; click: this.clickHandler, &#125;, &#125;, [this.$slots.default] ); &#125;, methods: &#123; clickHandler(e) &#123; history.pushState(&#123;&#125;, &quot;&quot;, this.to); this.$router.data.current &#x3D; this.to; e.preventDefault(); &#125;, &#125;, &#125;); const self &#x3D; this; Vue.component(&quot;router-view&quot;, &#123; render(h) &#123; console.log(self); const component &#x3D; self.routeMap[self.data.current]; return h(component); &#125;, &#125;); &#125; initEvent() &#123; window.addEventListener(&quot;popstate&quot;, () &#x3D;&gt; &#123; this.data.current &#x3D; window.location.pathname; &#125;); &#125;&#125;","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[]},{"title":"this、call、apply、bind","slug":"javascript/this-call-bind-apply","date":"2020-04-08T04:44:34.000Z","updated":"2021-03-18T13:27:07.964Z","comments":true,"path":"2020/04/08/javascript/this-call-bind-apply/","link":"","permalink":"http://example.com/2020/04/08/javascript/this-call-bind-apply/","excerpt":"","text":"前言小伙伴们，这篇文章的作用不用我多说了吧~~~，直接肝就完了 this指向首先我们聊聊this指向的问题，我也不多说啥了，你们只要记住我接下来说的这就话就行了，记住是打死也要记住：this永远指向最后调用它的那个对象 就这句啊，打死也要记住咯！！！ 那么，我们接下来就来看几个栗子： 栗子 11234567891011var name &#x3D; &quot;windows&quot;;function fn() &#123; var name &#x3D; &quot;Soliton&quot;; console.log(this.name); &#x2F;&#x2F; windows console.log(&quot;函数内:&quot; + this); &#x2F;&#x2F; 函数内: Window&#125;fn();console.log(&quot;全局:&quot; + this) &#x2F;&#x2F; 全局: Window 就这个，咱们先不说你看不看的懂，咱们直接先把那句this永远指向最后调用它的那个对象套进去。先定义了一个fn函数，最后在后面调用了一下，看清楚这个调用是在哪调的？是不是全局啊，我们都知道JS的全局对象是window。所以在全局调用的fn()函数我们就可以看作是window.fn()，所以按照规则，是不是this指向的就是window对象啊，而window对象是全局对象，全局我们是不是定义了一个name变量。所以，函数fn()中打印的name是不是就是windows啊。那这时候你是不是要问那我函数内部的name什么时候打印呢？别急接下来我们再来说说这个 栗子 2123456789var name &#x3D; &quot;windows&quot;;var fn &#x3D; &#123; name: &quot;Soliton&quot;, fn2 : function () &#123; console.log(this.name); &#x2F;&#x2F; Soliton &#125;&#125;fn.fn2(); 来，咱们继续套，这里最后调用的时候是不是fn.fn2(),照老规矩，全局调用咱们是不是可以看成window.fn.fn2(),再把之前的那个规则套进来，咱们会发现最后调用它的最后的对象是不是fn啊，而fn2函数是不是在fn这个对象的局部变量之中？，所以它取到的this.name最后是不是fn2这个局部对象中的name变量值？那就是Soliton了吧 照这个规律那下面两个结果是怎么样呢？各位不妨自行操作一下 题 1 12345678var name &#x3D; &quot;windows&quot;;var fn &#x3D; &#123; &#x2F;&#x2F; name: &quot;Soliton&quot;, fn2 : function () &#123; console.log(this.name); &#x2F;&#x2F; undefined &#125;&#125;window.fn.fn2(); 题 2 1234567891011var name &#x3D; &quot;windows&quot;;var fn &#x3D; &#123; name : null, &#x2F;&#x2F; name: &quot;Soliton&quot;, fn2 : function () &#123; console.log(this.name); &#x2F;&#x2F; windows &#125;&#125;var f &#x3D; fn.fn2;f(); 那么我们再思考下一个问题，如果我们要改变this指向呢 改变this的指向 使用ES6的箭头函数 在函数内部使用_this = this 使用 apply、call、bind new实例化一个对象 1. 箭头函数我们都知道ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。 2. 使用 _this=this此方法的原理就是将调用此函数的对象保存在新定一的一个_this变量之中，然后在函数的内部都是用这已经保存对象的_this就好了 3. new实例化一个对象我们前面说到this永远指向最后调用它的那个对象，这时候它的this指向就指向最后调用它的那个对象了例如： 1234567891011&#x2F;&#x2F; 构造函数:function myFunction(arg1, arg2) &#123; this.firstName &#x3D; arg1; this.lastName &#x3D; arg2;&#125;&#x2F;&#x2F; This creates a new objectvar a &#x3D; new myFunction(&quot;xzl&quot;,&quot;Soliton&quot;);a.lastName; &#x2F;&#x2F; 返回 &quot;Soliton&quot; 那么肯定有人问new?，我怎new？new是过程是啥？好家伙，我直接给你安排了 123456789var a &#x3D; new myFunction(&quot;xzl&quot;,&quot;Soliton&quot;);new myFunction&#123; var obj &#x3D; &#123;&#125;; &#x2F;&#x2F; 创建一个空对象 obj; obj.__proto__ &#x3D; myFunction.prototype; &#x2F;&#x2F; 将新创建的空对象的隐式原型指向其构造函数的显示原型。 var result &#x3D; myFunction.call(obj,&quot;xzl&quot;,&quot;Soliton&quot;); &#x2F;&#x2F;使用 call 改变 this 的指向 return typeof result &#x3D;&#x3D;&#x3D; &#39;obj&#39;? result : obj; &#x2F;&#x2F;如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。&#125; 4. 使用 apply、call、bind相同点 apply 、 call 、bind 三者都是用来改变函数的this对象的指向的； apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文； apply 、 call 、bind 三者都可以利用后续参数传参； 不同点 bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列,所以bind 是创建一个新的函数，我们必须要手动去调用；apply、call则是立即调用 。 2.call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。 3.某个函数的参数是明确知道数量时用 call ; 而不确定的时候用 apply，然后把参数 push进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数 func.call(this, arg1, arg2); func.apply(this, [arg1, arg2])","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"Promise 原理及实现","slug":"javascript/Promise","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-21T15:29:08.603Z","comments":true,"path":"2020/04/08/javascript/Promise/","link":"","permalink":"http://example.com/2020/04/08/javascript/Promise/","excerpt":"","text":"表述Promise就是将异步任务队列化，将多个异步任务按照顺序输出，同时用链式调用解决回调地狱的问题。今天我们就来好好剖析下Promise的原理： Promise规范1.存在三个状态：等待态(pending)，执行态(fulfilled)，失败态(rejected)2.初始态为等待态，可以转化为执行态和失败态3.执行态不可转化为其他状态，且必须有一个不可变的终值(value)4.失败态不可转化为其他状态，且必须有一个不可变的原因(reason)5.必须提供一个then方法，以供访问其当前值，如果状态成功调用成功回调函数、如果状态是失败，调用失败回调函数6.then方法提供两个参数：onFulfilled和onRejected7.onFulfilled和onRejected如果不是函数类型，必须忽略其8.如果executor执行报错，直接执行reject9.不同的promise可以相互套用更多详细内容还请自行参考Promise A+规范 1.不考虑异步的Promise12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; value &#x3D; undefined; reason &#x3D; undefined; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; successCallback(this.value) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125; &#125;&#125; 到此，一个不考虑异步情况的简单版Promise就出来了. 2.加入异步逻辑和then方法的多次调用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; successCallback(this.value) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;&#125; 3.添加then方法的链式调用和取得then方法的返回值1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; let x &#x3D; successCallback(this.value) &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolve(x) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;); return promise2 &#125;&#125; 上面这个成功的返回值x只能传递普通的值，那如果是一个promise对象呢？这时候我们就要看promise返回的对象的结果，再根据返回的结果决定是调用resolve，还是reject。这里有个问题可能大家已经想到了, 这个返回值有可能是为promise对象的情况,而且在then方法的回调函数当中，不能返回当前这个then方法所返回的promise对象的,因为这样就触发了promise的循环调用，浏览器就会报错那么，根据上述情况, 接下来我们就要再改造一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; let x &#x3D; successCallback(this.value) &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; 4.添加错误处理1.当执行器executor错误时2.then方法当中的回调函数报错时3.上述代码只处理了成功状态，现在我们要将失败或者异步时的状态也一并处理了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; try&#123; executor(this.resolve, this.reject) &#125; catch (e) &#123; this.reject(e); &#125; &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()() &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()() &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) this.failCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; OK，我知道各位道友看到这一步可能有点厌烦了, 那么我宣布一个事情：咱们这个Promise类的核心功能已经实现了&#x1F44d;当然，还想知道更多的咱们一起往下看 5.将then方法的参数变成可选参数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; try&#123; executor(this.resolve, this.reject) &#125; catch (e) &#123; this.reject(e); &#125; &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()() &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()() &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 当then()方法为空的时候其实等同于&#96;&#96;then(value &#x3D;&gt; value)&#96;&#96; successCallback &#x3D; successCallback ? successCallback:value &#x3D;&gt; value; failCallback &#x3D; failCallback ? failCallback:reason &#x3D;&gt; &#123; throw reason &#125;; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) this.failCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; 拓展1：实现promise.all()方法此方法主要用来解决异步并发问题的，此方法允许我们按照异步代买调用的顺序得到异步代码执行的结果 12345678910111213141516171819202122232425262728293031323334353637383940const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; .... static all (array) &#123; let result &#x3D; [] let index &#x3D; 0 return new MyPromise((resolve, reject) &#x3D;&gt; &#123; function addData (key, value) &#x3D;&gt;&#123; reslut[key] &#x3D; value; index++; if (index &#x3D;&#x3D;&#x3D; array.length) &#123; resolve(result) &#125; &#125; for( let i &#x3D; 0; i &lt; array.length; i++) &#123; let current &#x3D; array[i] if (current instanceof MyPromise) &#123; &#x2F;&#x2F; promise 对象 current.then( value &#x3D;&gt; addData(i, value), reason &#x3D;&gt; reject(reason)) &#125; else &#123; &#x2F;&#x2F; 普通值 addData(i, array[i]); &#125; &#125; &#125;) &#125;&#125; 拓展2：实现promise.resolve()方法123456789101112const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... static resolve(value) &#123; if ( value instanceof MyPromise) return value; return new MyPromise(resolve &#x3D;&gt; resolve(value)); &#125;&#125; 拓展3： 实现promise.finally()方法1234567891011121314151617const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... finally (callback) &#123; return this.then(value &#x3D;&gt; &#123; return MyPromise.resolve(callback()).then(() &#x3D;&gt; value) &#125;, reason &#x3D;&gt; &#123; return MyPromise.resolve(callback()).then(() &#x3D;&gt; &#123; throw reason&#125;) &#125;); &#125;&#125; 拓展4： 实现promise.catch()方法1234567891011const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... catch (failCallback) &#123; return this.then(undefined, failCallback) &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"数据的类型","slug":"javascript/02","date":"2020-04-07T05:14:34.000Z","updated":"2021-03-18T11:31:56.396Z","comments":true,"path":"2020/04/07/javascript/02/","link":"","permalink":"http://example.com/2020/04/07/javascript/02/","excerpt":"","text":"前言我不知道大家有没有发现，你做前端做了几年之后，突然间再让你复盘一下以前学过的基础知识的时候，你突然会发现自己好像记不太清了，我相信这是很多人的痛点，这时候我欧俄美就需要好好的总结下以前学的东西，并以此作为笔记录下来，只有通过此方法，日后你才会有充足的准备来应对接下来的各种变化。接下来我就来简单的为大家梳理一下以前学过的一些东西 1.数据类型我们都知道内存是用来存储数据的空间，而变量又是内存的标识。那么这个数据到底是什么呢？其实这个数据我们可以分为两大类，一是基本类型，又叫值类型，第二种是引用类型，接下来我们就来说说两者具体包含那些一：基本(值)类型 String: 任意字符串 Number: 任意数字 boolean: true/false undefined: undefined // 已声明未赋值 null: null // 此类型一般在初始赋值前表明接下来赋值为对象和运算结束后改为垃圾对象被浏览器内的垃圾回收器回收二：引用(对象)类型 Object：任意对象类型 Function: 一种特殊的对象(可执行) Array: 一种特别的对象(数值下标的集合,内部数据有序的) 判断数据类型基本类型的判断 typeof: 返回数据类型的字符串表达 &quot;undefined&quot;/数值/字符串/布尔/function;注意：此API中object与null不能区别、object与array不能区别 instanceof: 判断对象的具体类型，判断A是不是构造函数B的实例 ===： 可以判断undefined、null 引用数据类型的判断12345678910111213141516171819var b1 &#x3D;&#123; b2:[1,&#39;abc&#39;,console.log], b3:function ()&#123; console.log(&#39;b3) return function() &#123; return &#39;js&#39; &#125; &#125;&#125;console.log(b1 instanceof Object, b1 instanceof Array) &#x2F;&#x2F;true falseconsole.log(b1.b2 instanceof Array , b1.b2 instanceof Object) &#x2F;&#x2F;true trueconsole.log(b1.b3 instanceof Function, b1.b2 instanceof Object) &#x2F;&#x2F;true trueconsole.log(typeof b1.b3 &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#x2F;&#x2F;trueconsole.log(typeof b1.b[2] &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#x2F;&#x2F;trueconsole.log(b1.b3()) &#x2F;&#x2F;这里返回我们return那个函数，所以我们需要再次通过()来进行调用console.log(b1.b3()()) &#x2F;&#x2F;js 最后一个题外话：我们如何区分数据类型和变量类型呢？","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"深浅拷贝","slug":"javascript/copy","date":"2020-04-07T05:14:34.000Z","updated":"2021-03-18T21:44:14.712Z","comments":true,"path":"2020/04/07/javascript/copy/","link":"","permalink":"http://example.com/2020/04/07/javascript/copy/","excerpt":"","text":"前言首先我们知道Javascript中的数据是分为基本类型和引用类型的基本类型：string、number、null、undefined、boolean、symbol(ES6新增) 变量值存放在栈内存中，可直接访问和修改变量的值基本数据类型不存在拷贝，好比如说你无法修改数值1的值 Object Function RegExp Math Date 值为对象，存放在堆内存中在栈内存中变量保存的是一个指针，指向对应在堆内存中的地址。当访问引用类型的时候，要先从栈中取出该对象的地址指针，然后再从堆内存中取得所需的数据 所以想要深浅拷贝这里有一个前提就是必须是引用类型 浅拷贝及简单实现浅拷贝的意思就是只复制引用，而未复制真正的值。 123456789101112131415161718var obj &#x3D; &#123; a:1, b:2&#125;funcion simpClone()&#123; var cloneObj &#x3D; &#123;&#125; &lt;!-- 常规循环 --&gt; for(var i in obj)&#123; cloneObj[i] &#x3D; obj[i]; &#125; &lt;!-- Es6循环 --&gt; for (var [] of Object.enteies(obj))&#123; cloneObj[key] &#x3D; value &#125; return cloneObj;&#125;console.log(simpleClone(obj)) 深拷贝及简单实现深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。只要进行了深拷贝,那就是重新在堆中开辟了一块空间给予新的变量来存放数据。目前实现深拷贝的方法不多，主要是两种： 利用 JSON 对象中的 parse 和 stringify 利用递归来实现每一层都重新创建对象并赋值 首先我们原生递归使用 1234567891011121314151617181920212223242526272829var obj &#x3D; &#123; a:1, b:&#123; c:3, d:&#123; e:5, f:[1,2,3,4,5,6] &#125; &#125;&#125;funcion deepClone(obj,cloneObj)&#123; var cloneObj &#x3D; cloneObj || &#123;&#125; for(var i in obj)&#123; if (typeof obj[i] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; obj[i] !&#x3D;&#x3D; null)&#123; cloneObj[i] &#x3D;Array.isArray(obj[i] )?[] : &#123;&#125; deepClone(obj[i],cloneObj[i]) &#125;else&#123; cloneObj[i] &#x3D; obj[i]; &#125; &#125; return cloneObj;&#125;console.log(simpleClone(obj)) 利用 JSON 对象中的 parse 和 stringify实现 123456function deepClone(obj)&#123; return JSON.oarse(JSON.stringify(obj));&#125; 提问Array的slice和concat方法是深拷贝还是浅拷贝呢? 那Object.assign()呢?","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"函数式编程的柯里化","slug":"javascript/curry","date":"2020-04-07T05:14:34.000Z","updated":"2021-02-21T15:28:57.952Z","comments":true,"path":"2020/04/07/javascript/curry/","link":"","permalink":"http://example.com/2020/04/07/javascript/curry/","excerpt":"","text":"前言 在聊函数柯里化之前我们要知道一下概念： 什么是高阶函数，什么是回调函数？我们都知道函数可以作为参数传递到函数中，那么这个作为参数的函数就叫做回调函数、而使用这个参数的函数就叫做高阶函数 那什么是函数式编程呢？高阶函数执行的时候,根据回调函数内部的逻辑不同高阶函数的执行结果也会有所不同，这就叫函数式编程 柯里化上面我们了解了什么是函数式编程，那么函数柯里化其实就是函数式编程的一个重要思想，也是高阶函数的一个重要应用。就是给函数分步骤传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这期间可嵌套多层这样的接收部分参数的函数，直至返回最后的结果。 1.简单的柯里化12345678910111213141516171819&#x2F;&#x2F; 原函数function sum(a,b,c)&#123; return a+b+c&#125;&#x2F;&#x2F; 调用原函数sum(1,2,3)&#x2F;&#x2F; 柯里化函数function sumCurry(a)&#123; return function(b)&#123; return function(c)&#123; return a+b+c &#125; &#125;&#125;&#x2F;&#x2F; 调用柯里化函数sumCurry(1)(2)(3) 这就是一个最基本的柯里化拆分， 柯里化后的函数sumCurry每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，在返回的最后一个函数内部执行求和操作，这其实利用了闭包的特性来实现的。 2.通用柯里化函数上面的柯里化函数只是最基本最简单的函数，并没有涉及到高阶函数，也没有通用性，面对形参个数不定或者不知道的函数时就束手无策了，那么下面我们就用ES6来封装一个通用的柯里化转换函数 1234567891011function curry (func)&#123; return function curriedFn(...args)&#123; if( args.length &lt; func.length )&#123; return function()&#123; return curriedFn(...args.concat.(Array.from(arguments))) &#125; &#125; return func(...args) &#125;&#125; 3.总结1.函数的柯里化可以让我们给一个函数传递较少的参数得到一个已经记住的某些固定参数的新函数2.这是一种对函数参数的’缓存’3.让函数变的更灵活，让函数的粒度更小可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"防抖节流","slug":"javascript/debounce","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-21T15:28:27.790Z","comments":true,"path":"2020/04/06/javascript/debounce/","link":"","permalink":"http://example.com/2020/04/06/javascript/debounce/","excerpt":"","text":"防抖 debounce原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。适用场景：按钮提交场景：防止多次提交按钮，只执行最后提交的一次搜索框联想场景：防止联想发送请求，只发送最后一次输入 123456789101112function debounce(func, wait) &#123; let timeout; return function () &#123; const context &#x3D; this; const args &#x3D; arguments; clearTimeout(timeout) timeout &#x3D; setTimeout(function()&#123; func.apply(context, args) &#125;, wait); &#125;&#125; 节流 throttle原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。适用场景拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动缩放场景：监控浏览器resize 定时器版本123456789101112131415161718192021function throttle(fn, delay) &#123; let hasRun &#x3D; false; return function () &#123; if (hasRun) &#123; return; &#125; hasRun &#x3D; true; setTimeout(() &#x3D;&gt; &#123; hasRun &#x3D; false; fn.apply(this, arguments); &#125;, delay); &#125; &#125; var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;); let count &#x3D; 0; function myEvent()&#123; mydiv.innerText &#x3D; count++; &#125; mydiv.addEventListener(&#39;click&#39;, throttle(myEvent,2000)); 时间戳版本1234567891011121314151617let div &#x3D; document.querySelector(&#39;div&#39;);var count &#x3D; 0;function myEvent() &#123; div.innerText &#x3D; count++;&#125;div.onclick &#x3D; throttle(myEvent,2000);function throttle(func, wait) &#123; let pre &#x3D; 0; return function () &#123; let now &#x3D; new Date().getTime(); if (now - pre &gt; wait) &#123; pre &#x3D; now; func.apply(this); &#125; &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}],"categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"},{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}