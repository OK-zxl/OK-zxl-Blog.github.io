{"meta":{"title":"Soliton's Blog","subtitle":"","description":"","author":"Soliton","url":"http://example.com","root":"/"},"pages":[{"title":"归档","date":"2020-04-05T04:06:45.000Z","updated":"2021-02-14T15:56:03.520Z","comments":false,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-27T05:16:03.000Z","updated":"2021-02-14T15:56:21.459Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-15T14:47:48.041Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"个人资料","date":"2021-02-14T16:55:29.956Z","updated":"2021-02-14T16:55:29.956Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"本人18级计算机专业毕业，是一枚96年的程序员。迄今为止三年时间都投身于互联网教育行业。目前在魔都一家200人的在线教育企业做前端开发。现在负责UG（User Growth）项目组的前端开发 技术栈熟练：JavaScript、Vue和React周边生态、小程序云开发熟悉：Node、Express、koa2、mongoDB CD/CI流程的搭建了解：Golang、Nginx、自动化部署 个人兴趣爱好闲暇之余喜欢：看电影、NBA、打篮球 自我评价工作三年，黑发不知勤学早，白首方悔读书迟。特别是在前程无忧实习的一年，身边大神很多，要学习的也有很多很多，在不断的自我反省中慢慢成长。这是我一直以来保持的目标，也会一直保持下去，按照前辈们的脚步走下去，希望有一天能追赶上前辈们。"},{"title":"标签","date":"2020-04-04T05:15:29.000Z","updated":"2021-02-14T15:55:10.976Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"search","date":"2021-02-14T16:04:51.000Z","updated":"2021-02-14T16:04:51.427Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"你好，很荣幸您能来到我的博客！","slug":"hello-world","date":"2021-02-14T15:36:09.864Z","updated":"2021-02-16T07:53:14.257Z","comments":false,"path":"2021/02/14/hello-world/","link":"","permalink":"http://example.com/2021/02/14/hello-world/","excerpt":"","text":"此博客为本人近期才正式上传，此前一直放在本地(别问为什么，问就是害怕被大佬笑话)，中途因为个人原因和工作繁忙一直未能上线，逢此春节七天留沪过年的时间，经过激烈的思想斗争，最终还是上来了，望大佬轻喷~，有错误的地方还请务必提醒笔者改正，万分感谢！","categories":[],"tags":[]},{"title":"函数式编程的柯里化","slug":"javascript/javascript02","date":"2020-04-07T05:14:34.000Z","updated":"2021-02-17T14:58:44.679Z","comments":true,"path":"2020/04/07/javascript/javascript02/","link":"","permalink":"http://example.com/2020/04/07/javascript/javascript02/","excerpt":"","text":"前言 在聊函数柯里化之前我们要知道一下概念： 什么是高阶函数，什么是回调函数？我们都知道函数可以作为参数传递到函数中，那么这个作为参数的函数就叫做回调函数、而使用这个参数的函数就叫做高阶函数 那什么是函数式编程呢？高阶函数执行的时候,根据回调函数内部的逻辑不同高阶函数的执行结果也会有所不同，这就叫函数式编程 柯里化上面我们了解了什么是函数式编程，那么函数柯里化其实就是函数式编程的一个重要思想，也是高阶函数的一个重要应用。就是给函数分步骤传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这期间可嵌套多层这样的接收部分参数的函数，直至返回最后的结果。 1.简单的柯里化12345678910111213141516171819&#x2F;&#x2F; 原函数function sum(a,b,c)&#123; return a+b+c&#125;&#x2F;&#x2F; 调用原函数sum(1,2,3)&#x2F;&#x2F; 柯里化函数function sumCurry(a)&#123; return function(b)&#123; return function(c)&#123; return a+b+c &#125; &#125;&#125;&#x2F;&#x2F; 调用柯里化函数sumCurry(1)(2)(3) 这就是一个最基本的柯里化拆分， 柯里化后的函数sumCurry每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，在返回的最后一个函数内部执行求和操作，这其实利用了闭包的特性来实现的。 2.通用柯里化函数上面的柯里化函数只是最基本最简单的函数，并没有涉及到高阶函数，也没有通用性，面对形参个数不定或者不知道的函数时就束手无策了，那么下面我们就用ES6来封装一个通用的柯里化转换函数 1234567891011function curry (func)&#123; return function curriedFn(...args)&#123; if( args.length &lt; func.length )&#123; return function()&#123; return curriedFn(...args.concat.(Array.from(arguments))) &#125; &#125; return func(...args) &#125;&#125; 3.总结1.函数的柯里化可以让我们给一个函数传递较少的参数得到一个已经记住的某些固定参数的新函数2.这是一种对函数参数的’缓存’3.让函数变的更灵活，让函数的粒度更小可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"防抖节流","slug":"javascript/javascript01","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-16T08:37:36.370Z","comments":true,"path":"2020/04/06/javascript/javascript01/","link":"","permalink":"http://example.com/2020/04/06/javascript/javascript01/","excerpt":"","text":"防抖 debounce防抖：就是指触发事件后 n 秒后才执行函数，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 123456789101112131415161718function debounce(fn,delay) &#123; let timeout &#x3D; null; return function () &#123; if(timeout)&#123; clearTimeout(timeout); &#125; timeout &#x3D; setTimeout(() &#x3D;&gt; &#123; fn.apply(this, arguments); &#125;,delay); &#125; &#125; var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;); let count &#x3D; 0; function myEvent()&#123; mydiv.innerText &#x3D; count++; &#125; mydiv.addEventListener(&#39;click&#39;, debounce(myEvent,2000)); 节流 throttle节流：指连续触发事件但是在 n 秒中只执行一次函数。 定时器版本123456789101112131415161718192021function throttle(fn, delay) &#123; let hasRun &#x3D; false; return function () &#123; if (hasRun) &#123; return; &#125; hasRun &#x3D; true; setTimeout(() &#x3D;&gt; &#123; hasRun &#x3D; false; fn.apply(this, arguments); &#125;, delay); &#125; &#125; var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;); let count &#x3D; 0; function myEvent()&#123; mydiv.innerText &#x3D; count++; &#125; mydiv.addEventListener(&#39;click&#39;, throttle(myEvent,2000)); 时间戳版本1234567891011121314151617let div &#x3D; document.querySelector(&#39;div&#39;);var count &#x3D; 0;function myEvent() &#123; div.innerText &#x3D; count++;&#125;div.onclick &#x3D; throttle(myEvent,2000);function throttle(func, wait) &#123; let pre &#x3D; 0; return function () &#123; let now &#x3D; new Date().getTime(); if (now - pre &gt; wait) &#123; pre &#x3D; now; func.apply(this); &#125; &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}