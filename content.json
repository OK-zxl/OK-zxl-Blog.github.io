{"meta":{"title":"Soliton's Blog","subtitle":"","description":"","author":"Soliton","url":"http://example.com","root":"/"},"pages":[{"title":"归档","date":"2020-04-05T04:06:45.000Z","updated":"2021-02-14T15:56:03.520Z","comments":false,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"个人资料","date":"2021-02-14T16:55:29.956Z","updated":"2021-02-14T16:55:29.956Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"本人18级计算机专业毕业，是一枚96年的程序员。迄今为止三年时间都投身于互联网教育行业。目前在魔都一家200人的在线教育企业做前端开发。现在负责UG（User Growth）项目组的前端开发 技术栈熟练：JavaScript、Vue和React周边生态、小程序云开发熟悉：Node、Express、koa2、mongoDB CD/CI流程的搭建了解：Golang、Nginx、自动化部署 个人兴趣爱好闲暇之余喜欢：看电影、NBA、打篮球 自我评价工作三年，黑发不知勤学早，白首方悔读书迟。特别是在前程无忧实习的一年，身边大神很多，要学习的也有很多很多，在不断的自我反省中慢慢成长。这是我一直以来保持的目标，也会一直保持下去，按照前辈们的脚步走下去，希望有一天能追赶上前辈们。"},{"title":"文章分类","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-15T14:47:48.041Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2021-02-14T16:04:51.000Z","updated":"2021-02-14T16:04:51.427Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-27T05:16:03.000Z","updated":"2021-02-14T15:56:21.459Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-04T05:15:29.000Z","updated":"2021-02-14T15:55:10.976Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"你好，很荣幸您能来到我的博客！","slug":"hello-world","date":"2021-02-14T15:36:09.864Z","updated":"2021-02-16T07:53:14.257Z","comments":false,"path":"2021/02/14/hello-world/","link":"","permalink":"http://example.com/2021/02/14/hello-world/","excerpt":"","text":"此博客为本人近期才正式上传，此前一直放在本地(别问为什么，问就是害怕被大佬笑话)，中途因为个人原因和工作繁忙一直未能上线，逢此春节七天留沪过年的时间，经过激烈的思想斗争，最终还是上来了，望大佬轻喷~，有错误的地方还请务必提醒笔者改正，万分感谢！","categories":[],"tags":[]},{"title":"Next.js+koa项目环境搭建","slug":"react/next","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-26T13:44:21.644Z","comments":true,"path":"2020/04/08/react/next/","link":"","permalink":"http://example.com/2020/04/08/react/next/","excerpt":"","text":"前言自从19年中开始做UG以来，这大半年时间也算完成了从Vue到React的转型，也学会了运用Next.js这个SSR框架，接下来我就手把手教大家初步运用Next.js+Koa搭建一个初步的全栈项目","categories":[{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"}],"tags":[]},{"title":"vue-Router","slug":"vue/vue-Router","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-26T14:53:22.612Z","comments":true,"path":"2020/04/08/vue/vue-Router/","link":"","permalink":"http://example.com/2020/04/08/vue/vue-Router/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394let _Vue &#x3D; null;export default class VueRouter &#123; static install(Vue) &#123; &#x2F;&#x2F; 1. 判断当前插件是否已经被安装 if (VueRouter.install.installed) &#123; return; &#125; VueRouter.install.installed &#x3D; true; &#x2F;&#x2F; 2. 把 Vue 构造函数记录到全局变量 _Vue &#x3D; Vue; &#x2F;&#x2F; 3. 把创建的 Vue 实例时所传入的 router 对象注入到 Vue 实例上 &#x2F;&#x2F; 混入 _Vue.mixin(&#123; beforeCreate() &#123; if (this.$options.router) &#123; _Vue.prototype.$router &#x3D; this.$options.router; this.$options.router.init(); &#125; &#125;, &#125;); &#125; constructor(options) &#123; this.options &#x3D; options; this.routeMap &#x3D; &#123;&#125;; this.data &#x3D; _Vue.observable(&#123; current: &quot;&#x2F;&quot;, &#125;); &#125; init() &#123; this.initRouterMap(); this.initComponents(_Vue); this.initEvent(); &#125; initRouterMap() &#123; &#x2F;&#x2F; 遍历所有的路由规则，把路由规则解析成键值对的形式 存储到 routerMap 中 this.options.routes.forEach((route) &#x3D;&gt; &#123; this.routeMap[route.path] &#x3D; route.component; &#125;); &#125; initComponents(Vue) &#123; Vue.component(&quot;router-link&quot;, &#123; props: &#123; to: String, &#125;, &#x2F;&#x2F; template: &#96; &#x2F;&#x2F; &lt;a :href&#x3D;&quot;to&quot;&gt; &#x2F;&#x2F; &lt;slot&gt;&lt;&#x2F;slot&gt; &#x2F;&#x2F; &lt;&#x2F;a&gt; &#x2F;&#x2F; &#96;, render(h) &#123; return h( &quot;a&quot;, &#123; attrs: &#123; href: this.to, &#125;, on: &#123; click: this.clickHandler, &#125;, &#125;, [this.$slots.default] ); &#125;, methods: &#123; clickHandler(e) &#123; history.pushState(&#123;&#125;, &quot;&quot;, this.to); this.$router.data.current &#x3D; this.to; e.preventDefault(); &#125;, &#125;, &#125;); const self &#x3D; this; Vue.component(&quot;router-view&quot;, &#123; render(h) &#123; console.log(self); const component &#x3D; self.routeMap[self.data.current]; return h(component); &#125;, &#125;); &#125; initEvent() &#123; window.addEventListener(&quot;popstate&quot;, () &#x3D;&gt; &#123; this.data.current &#x3D; window.location.pathname; &#125;); &#125;&#125;","categories":[{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"}],"tags":[]},{"title":"Promise 原理及实现","slug":"javascript/Promise","date":"2020-04-08T04:44:34.000Z","updated":"2021-02-21T15:29:08.603Z","comments":true,"path":"2020/04/08/javascript/Promise/","link":"","permalink":"http://example.com/2020/04/08/javascript/Promise/","excerpt":"","text":"表述Promise就是将异步任务队列化，将多个异步任务按照顺序输出，同时用链式调用解决回调地狱的问题。今天我们就来好好剖析下Promise的原理： Promise规范1.存在三个状态：等待态(pending)，执行态(fulfilled)，失败态(rejected)2.初始态为等待态，可以转化为执行态和失败态3.执行态不可转化为其他状态，且必须有一个不可变的终值(value)4.失败态不可转化为其他状态，且必须有一个不可变的原因(reason)5.必须提供一个then方法，以供访问其当前值，如果状态成功调用成功回调函数、如果状态是失败，调用失败回调函数6.then方法提供两个参数：onFulfilled和onRejected7.onFulfilled和onRejected如果不是函数类型，必须忽略其8.如果executor执行报错，直接执行reject9.不同的promise可以相互套用更多详细内容还请自行参考Promise A+规范 1.不考虑异步的Promise12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; value &#x3D; undefined; reason &#x3D; undefined; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; successCallback(this.value) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125; &#125;&#125; 到此，一个不考虑异步情况的简单版Promise就出来了. 2.加入异步逻辑和then方法的多次调用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; successCallback(this.value) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;&#125; 3.添加then方法的链式调用和取得then方法的返回值1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; let x &#x3D; successCallback(this.value) &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolve(x) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;); return promise2 &#125;&#125; 上面这个成功的返回值x只能传递普通的值，那如果是一个promise对象呢？这时候我们就要看promise返回的对象的结果，再根据返回的结果决定是调用resolve，还是reject。这里有个问题可能大家已经想到了, 这个返回值有可能是为promise对象的情况,而且在then方法的回调函数当中，不能返回当前这个then方法所返回的promise对象的,因为这样就触发了promise的循环调用，浏览器就会报错那么，根据上述情况, 接下来我们就要再改造一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; executor(this.resolve, this.reject) &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()(this.value) &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()(this.value) &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; let x &#x3D; successCallback(this.value) &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; failCallback(this.reason) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(successCallback) this.failCallback.push(failCallback) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; 4.添加错误处理1.当执行器executor错误时2.then方法当中的回调函数报错时3.上述代码只处理了成功状态，现在我们要将失败或者异步时的状态也一并处理了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; try&#123; executor(this.resolve, this.reject) &#125; catch (e) &#123; this.reject(e); &#125; &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()() &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()() &#125; then ( successCallback, failCallback ) &#123; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) this.failCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; OK，我知道各位道友看到这一步可能有点厌烦了, 那么我宣布一个事情：咱们这个Promise类的核心功能已经实现了&#x1F44d;当然，还想知道更多的咱们一起往下看 5.将then方法的参数变成可选参数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; constructor (executor)&#123; try&#123; executor(this.resolve, this.reject) &#125; catch (e) &#123; this.reject(e); &#125; &#125; &#x2F;&#x2F;promise 状态 status &#x3D; PENDING; &#x2F;&#x2F; 成功和失败的信息 value &#x3D; undefined; reason &#x3D; undefined; &#x2F;&#x2F;成功和失败的回调 successCallback &#x3D; []; failCallback &#x3D; []; resolve &#x3D; value &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为成功 this.status &#x3D; FULFILLED; &#x2F;&#x2F; 保存成功之后的值 this.value &#x3D; value &#x2F;&#x2F; 判断成功回调是否存在 存在即调用 while (this.successCallback.length) this.successCallback.shift()() &#125; reject &#x3D; reason &#x3D;&gt; &#123; &#x2F;&#x2F; 如果不是等待状态、阻止程序向下执行 if(this.status !&#x3D;&#x3D; PENDING) return; &#x2F;&#x2F; 将状态更改为失败 this.status &#x3D; REJECTED; &#x2F;&#x2F;保存失败的原因 this.reason &#x3D; reason &#x2F;&#x2F;判断失败回调是否存在，存在及调用 while (this.failCallback.length) this.failCallback.shift()() &#125; then ( successCallback, failCallback ) &#123; &#x2F;&#x2F; 当then()方法为空的时候其实等同于&#96;&#96;then(value &#x3D;&gt; value)&#96;&#96; successCallback &#x3D; successCallback ? successCallback:value &#x3D;&gt; value; failCallback &#x3D; failCallback ? failCallback:reason &#x3D;&gt; &#123; throw reason &#125;; let promise2 &#x3D; new MyPromise((resolve,reject)&#x3D;&gt;&#123; &#x2F;&#x2F; 判断状态 if ( this.status &#x3D;&#x3D;&#x3D; FULFILLED )&#123; &#x2F;&#x2F; 所有同步代码执行完成后，执行下面异步代码 setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else if (this.status &#x3D;&#x3D;&#x3D; REJECTED)&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;else&#123; &#x2F;&#x2F; 等待、将成功和失败的回调存储起来 this.successCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; successCallback(this.value); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) this.failCallback.push(()&#x3D;&gt;&#123; setTimeout(()&#x3D;&gt;&#123; try&#123; let x &#x3D; failCallback(this.reason); &#x2F;&#x2F;将上一个then的回调函数的返回值传递给下一个then方法成功的回调 resolvePromise( promise2, x, resolve, reject) &#125;catch (e)&#123; reject(e); &#125; &#125;, 0) &#125;) &#125; &#125;); return promise2 &#125;&#125;function resolvePromise( promise2, x, resolve, reject) &#123; &#x2F;&#x2F; 判断传递的promise对象是否和本身promise相等，如果是就返回报错 if (promise2 &#x3D;&#x3D;&#x3D; x) &#123; return reject(new TypeError(&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;)) &#125; if (x instanceof MyPromise) &#123; &#x2F;&#x2F; promise对象 &#x2F;&#x2F; x.then(value &#x3D;&gt; resolve(value), reason &#x3D;&gt; reject(reason)) x.then(resolve,reject) &#125; else &#123; &#x2F;&#x2F; 普通值 resolve(x) &#125;&#125; 拓展1：实现promise.all()方法此方法主要用来解决异步并发问题的，此方法允许我们按照异步代买调用的顺序得到异步代码执行的结果 12345678910111213141516171819202122232425262728293031323334353637383940const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; .... static all (array) &#123; let result &#x3D; [] let index &#x3D; 0 return new MyPromise((resolve, reject) &#x3D;&gt; &#123; function addData (key, value) &#x3D;&gt;&#123; reslut[key] &#x3D; value; index++; if (index &#x3D;&#x3D;&#x3D; array.length) &#123; resolve(result) &#125; &#125; for( let i &#x3D; 0; i &lt; array.length; i++) &#123; let current &#x3D; array[i] if (current instanceof MyPromise) &#123; &#x2F;&#x2F; promise 对象 current.then( value &#x3D;&gt; addData(i, value), reason &#x3D;&gt; reject(reason)) &#125; else &#123; &#x2F;&#x2F; 普通值 addData(i, array[i]); &#125; &#125; &#125;) &#125;&#125; 拓展2：实现promise.resolve()方法123456789101112const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... static resolve(value) &#123; if ( value instanceof MyPromise) return value; return new MyPromise(resolve &#x3D;&gt; resolve(value)); &#125;&#125; 拓展3： 实现promise.finally()方法1234567891011121314151617const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... finally (callback) &#123; return this.then(value &#x3D;&gt; &#123; return MyPromise.resolve(callback()).then(() &#x3D;&gt; value) &#125;, reason &#x3D;&gt; &#123; return MyPromise.resolve(callback()).then(() &#x3D;&gt; &#123; throw reason&#125;) &#125;); &#125;&#125; 拓展4： 实现promise.catch()方法1234567891011const PENDING &#x3D;&#39;pending&#39; &#x2F;&#x2F; 等待const FULFILLED &#x3D;&#39;fulfilled&#39; &#x2F;&#x2F; 成功const REJECTED &#x3D; &#39;rejected&#39; &#x2F;&#x2F; 失败class MyPromise&#123; ..... catch (failCallback) &#123; return this.then(undefined, failCallback) &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"函数式编程的柯里化","slug":"javascript/curry","date":"2020-04-07T05:14:34.000Z","updated":"2021-02-21T15:28:57.952Z","comments":true,"path":"2020/04/07/javascript/curry/","link":"","permalink":"http://example.com/2020/04/07/javascript/curry/","excerpt":"","text":"前言 在聊函数柯里化之前我们要知道一下概念： 什么是高阶函数，什么是回调函数？我们都知道函数可以作为参数传递到函数中，那么这个作为参数的函数就叫做回调函数、而使用这个参数的函数就叫做高阶函数 那什么是函数式编程呢？高阶函数执行的时候,根据回调函数内部的逻辑不同高阶函数的执行结果也会有所不同，这就叫函数式编程 柯里化上面我们了解了什么是函数式编程，那么函数柯里化其实就是函数式编程的一个重要思想，也是高阶函数的一个重要应用。就是给函数分步骤传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这期间可嵌套多层这样的接收部分参数的函数，直至返回最后的结果。 1.简单的柯里化12345678910111213141516171819&#x2F;&#x2F; 原函数function sum(a,b,c)&#123; return a+b+c&#125;&#x2F;&#x2F; 调用原函数sum(1,2,3)&#x2F;&#x2F; 柯里化函数function sumCurry(a)&#123; return function(b)&#123; return function(c)&#123; return a+b+c &#125; &#125;&#125;&#x2F;&#x2F; 调用柯里化函数sumCurry(1)(2)(3) 这就是一个最基本的柯里化拆分， 柯里化后的函数sumCurry每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，在返回的最后一个函数内部执行求和操作，这其实利用了闭包的特性来实现的。 2.通用柯里化函数上面的柯里化函数只是最基本最简单的函数，并没有涉及到高阶函数，也没有通用性，面对形参个数不定或者不知道的函数时就束手无策了，那么下面我们就用ES6来封装一个通用的柯里化转换函数 1234567891011function curry (func)&#123; return function curriedFn(...args)&#123; if( args.length &lt; func.length )&#123; return function()&#123; return curriedFn(...args.concat.(Array.from(arguments))) &#125; &#125; return func(...args) &#125;&#125; 3.总结1.函数的柯里化可以让我们给一个函数传递较少的参数得到一个已经记住的某些固定参数的新函数2.这是一种对函数参数的’缓存’3.让函数变的更灵活，让函数的粒度更小可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]},{"title":"防抖节流","slug":"javascript/debounce","date":"2020-04-06T04:44:34.000Z","updated":"2021-02-21T15:28:27.790Z","comments":true,"path":"2020/04/06/javascript/debounce/","link":"","permalink":"http://example.com/2020/04/06/javascript/debounce/","excerpt":"","text":"防抖 debounce原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。适用场景：按钮提交场景：防止多次提交按钮，只执行最后提交的一次搜索框联想场景：防止联想发送请求，只发送最后一次输入 123456789101112function debounce(func, wait) &#123; let timeout; return function () &#123; const context &#x3D; this; const args &#x3D; arguments; clearTimeout(timeout) timeout &#x3D; setTimeout(function()&#123; func.apply(context, args) &#125;, wait); &#125;&#125; 节流 throttle原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。适用场景拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动缩放场景：监控浏览器resize 定时器版本123456789101112131415161718192021function throttle(fn, delay) &#123; let hasRun &#x3D; false; return function () &#123; if (hasRun) &#123; return; &#125; hasRun &#x3D; true; setTimeout(() &#x3D;&gt; &#123; hasRun &#x3D; false; fn.apply(this, arguments); &#125;, delay); &#125; &#125; var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;); let count &#x3D; 0; function myEvent()&#123; mydiv.innerText &#x3D; count++; &#125; mydiv.addEventListener(&#39;click&#39;, throttle(myEvent,2000)); 时间戳版本1234567891011121314151617let div &#x3D; document.querySelector(&#39;div&#39;);var count &#x3D; 0;function myEvent() &#123; div.innerText &#x3D; count++;&#125;div.onclick &#x3D; throttle(myEvent,2000);function throttle(func, wait) &#123; let pre &#x3D; 0; return function () &#123; let now &#x3D; new Date().getTime(); if (now - pre &gt; wait) &#123; pre &#x3D; now; func.apply(this); &#125; &#125;&#125;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}],"categories":[{"name":"react","slug":"react","permalink":"http://example.com/categories/react/"},{"name":"vue","slug":"vue","permalink":"http://example.com/categories/vue/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/categories/JavaScript/"}],"tags":[]}